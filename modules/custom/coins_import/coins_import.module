<?php
/**
 * Created by PhpStorm.
 * User: Andrey
 * Date: 24.11.2016
 * Time: 23:39
 * http://www.coinproject.com/siteimages/28-70-08511q001.jpg
 */

module_load_include('inc', 'coins_import', 'coins_import.grades');
module_load_include('inc', 'coins_import', 'coins_import.gettype');
module_load_include('inc', 'coins_import', 'coins_import.import');
module_load_include('inc', 'coins_import', 'coins_import.create_taxonomy');

/////////////////////////////

function _convertGrage($raw_grage) {
    //if($raw_grade == 'weef') {return 'c6'} else

}

function coins_import_menu() {
    $items = array();

    $items['admin/import-coins'] = array(
        'title' => 'import coins',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('coins_import_form'),
        'access callback' => TRUE,
    );

    $items['admin/create-taxonomy'] = array(
        'title' => 'Create taxonomu',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('coins_import_create_taxonomy_form'),
        'access callback' => TRUE,
    );

    return $items;
}

function coins_import_create_taxonomy_form() {
    $form['description'] = array(
        '#type' => 'markup',
        '#markup' => '<p>We will create taxonomy</p>',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Create taxonomy',
    );

    $terms = _prepare_terms();

    return $form;
}

function coins_import_create_taxonomy_form_submit() {
    $terms = _prepare_terms();
    _create_taxonomy($terms);
}

function coins_import_form() {
    $form['description'] = array(
        '#type' => 'markup',
        '#markup' => '<p>We will import coins</p>',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Import',
    );

    $url = 'http://localhost:3000/coins';
    $result = drupal_http_request($url);
    $result_data = json_decode($result->data);

    dsm(count($result_data->message));

    return $form;
}

function coins_import_form_submit($form, &$form_state) {
    // Подготавливаем данные для операций
    $url = 'http://localhost:3000/coins';
    $result = drupal_http_request($url);
    $result_data = json_decode($result->data);

    $uids = db_select('users_roles', 'u')
        ->fields('u', array('uid'))
        ->condition('u.rid', '7')
        ->execute()->fetchAll();

    $test_array = [];
    $uids_array = [];

    $batch_limit = 5000;

    for ($i = 0; $i < $batch_limit; $i++) {
        $random_uid_position = intval(rand(0 , count($uids)-1));
        array_push($test_array, $result_data->message[$i]);
        array_push($uids_array, $uids[$random_uid_position]->uid);
    }

    dsm($test_array);

    // Создаём массив с операциями.
    $j = 0;
    foreach ($test_array as $row) {
        $u = $uids_array[$j];
        $operations[] = array('coins_import_operation', array($row, $u));
        $j++;
    }

    $batch = array(
        // Массив операций и их параметров
        'operations' => $operations,
        // Функция, которая будет выполнена после окончания всех операций
        'finished' => 'coins_import_batch_finished',
        // Заголовок страницы с прогресс баром.
        // Опционально, по умолчанию t('Processing')
        'title' => 'Создание нод',
        // Сообщение, показываемое при инициализации.
        // Опционально, по умолчанию t('Initializing.')
        'init_message' => 'Подготовка данных',
        // Сообщение, показывемое при выполнении операций.
        // Опционально, по умолчанию t('Completed @current of @total.')
        'progress_message' => 'Выполнено @current из @total.',
        // Сообщение показываемое при ошибке выполнения операции.
        // Опционально, по умолчанию t('An error has occurred.')
        'error_message' => 'Произошла ошибка.',
    );

    batch_set($batch);
    // Если Batch API используется не из _submit функции,
    // то дополнительно нужно вызвать batch_process();
}

/**
 * Batch process callback.
 */
function coins_import_operation($row, $u, &$context) {
    // Производим манипуляции над нодами

    $node = coins_import_createnode($row, $u);

    // Эта информация будет доступна в mymodule_batch_finished
    $context['results']['titles'][] = $node->title;
    // Сообщение выводимое под прогресс-баром после окончания текущей операции
    $context['message'] = 'Созданы ноды <em>' . check_plain($node->title) . '</em>';
}

/**
 * Batch finish callback.
 */
function coins_import_batch_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message('Создано нод ' . count($results['titles']) . ' материалов:' . theme('item_list', array('items' => $results['titles'])));
    }
    else {
        drupal_set_message('Завершено с ошибками.', 'error');
    }
}

function coins_import_update_7004() {
    // Manual database changes.
    $field_name = "field_obverse_legend";

    $rows = db_query("SELECT id,data FROM {field_config} WHERE field_name = '{$field_name}' ")->fetchAll(PDO::FETCH_OBJ);

    foreach ($rows as $row ){
        $row->data=unserialize($row->data);
        unset($row->data['settings']['max_length']);
        $row->type="text_long";
        drupal_write_record("field_config", $row, "id");
    }

// Update field_config_instance
    $rows = db_query("SELECT id,data FROM {field_config_instance} WHERE field_name = '{$field_name}'")->fetchAll(PDO::FETCH_OBJ);

    foreach ($rows as $row ){
        $row->data=unserialize($row->data);
        $row->data['widget']['type']='text_textarea';
        unset($row->data['widget']['settings']['size']);
        $row->data['widget']['settings']['rows']=5;
        drupal_write_record("field_config_instance", $row, "id");
    }

// Update the field table
    db_change_field("field_data_{$field_name}", "{$field_name}_value", "{$field_name}_value", array(
        "type" => "varchar",
        "length" => "20000",
    ));
    db_change_field("field_revision_{$field_name}", "{$field_name}_value", "{$field_name}_value", array(
        "type" => "varchar",
        "length" => "20000",
    ));

// Clear caches.
    field_cache_clear(TRUE);

}