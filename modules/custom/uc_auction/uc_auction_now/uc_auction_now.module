<?php

/**
 * @defgroup uc_auction_now Ubercart Auction Buy Now: Allows auctioned products
 * to be purchased immediately.
 */

/**
 * Implements hook_form_alter().
 */
function uc_auction_now_form_alter(&$form, $form_state, $form_id) {
  if (uc_product_is_product_form($form)) {
    // We're editing a product type node. Add form elements to make it possible
    // to Buy Now this product.
    $form['base']['auction']['is_now'] = array(
      '#type' => 'checkbox',
      '#title' => t('&ldquo;Buy now&rdquo; functionality enabled for this product.'),
      '#description' => t('When enabled, customers can purchase the product immediatelty for the standard sell price without placing bids. When the product is purchased, the auction ends immediately.'),
      // If this is a pre-existing product, use the pre-existing Buy Now value
      // added in hook_nodeapi($op = 'load'); else, use the default value
      '#default_value' => (isset($form['#node']->uc_auction) && $form['#node']->uc_auction['buy_now']) || (!isset($form['#node']->nid) && variable_get('uc_auction_now_new_default', FALSE)),
      '#weight' => 15,
    );

     //coin clone hook
    if (!empty($form['#node']->clone_from_original_nid)) {
        $form['base']['auction']['is_now']['#default_value'] = FALSE;
    }
  }
  elseif ($form_id === 'uc_product_field_settings_form') {
    // Add widget to field form
    $fields = variable_get('uc_auction_now_field_settings', array(
      'uc_auction_now_box' => array(
        'enabled' => TRUE,
        'weight' => -2,
      ),
    ));
    $form['fields']['uc_auction_now_box'] = array(
      'enabled' => array(
        '#type' => 'checkbox',
        '#default_value' => $fields['uc_auction_now_box']['enabled'],
      ),
      'title' => array(
        '#type' => 'markup',
        '#value' => t('Auction buy now box'),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#delta' => 10,
        '#default_value' => $fields['uc_auction_now_box']['weight'],
      ),
    );
    // Resort the list, without #properties
    $props = array();
    $children = array();
    foreach ($form['fields'] as $key => $val) {
      if (strpos($key, '#') === 0) {
        $props[$key] = $val;
      }
      else {
        $children[$key] = $val;
      }
    }
    uasort($children, 'uc_weight_sort');
    $form['fields'] = $props + $children;
    $form['#submit'][] = 'uc_auction_now_field_settings_submit';
    $form['buttons']['reset']['#submit'][] = 'uc_auction_now_field_settings_submit';
  }
  elseif ($form_id === 'uc_auction_settings_form') {
    // Add "By Now" by default check box
    $form['uc_auction_default_fset']['uc_auction_now_new_default'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable &ldquo;Buy now&rdquo; functionality by default'),
      '#description' => t('If checked, the new product form will have the <em>&ldquo;Buy now&rdquo; functionality enabled for this product</em> check box checked by default.'),
      '#default_value' => variable_get('uc_auction_now_new_default', FALSE),
      '#weight' => 6,
    );
    $form['uc_auction_default_fset']['uc_auction_now_dis_over'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable &ldquo;Buy Now&rdquo; if the high bid is equal to or higher than the sell price'),
      '#description' => t('If checked, if the value of the current high bid on an auctioned product is equal to or higher than the sell price, the product will behave as if &ldquo;Buy Now&rdquo; were not enabled for it.'),
      '#default_value' => variable_get('uc_auction_now_dis_over', TRUE),
      '#weight' => 7,
    );
    // Add notification fields
    $form['uc_auction_now_notify_bought_fset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bought notification'),
      '#weight' => -8,
      '#description' => t('This message is sent to the highest bidder of an auction when the auction ends due to the item being purchased using the &ldquo;Buy now&rdquo; feature.'),
      'uc_auction_now_notify_bought_subj' => array(
        '#type' => 'textfield',
        '#title' => t('Notification message subject'),
        '#default_value' => variable_get('uc_auction_now_notify_bought_subj', uc_get_message('uc_auction_now_notify_bought_subj')),
        '#weight' => 5,
      ),
      'uc_auction_now_notify_bought_msg' => array(
        '#type' => 'textarea',
        '#title' => t('Notification message body'),
        '#description' => t('The message emailed to the last bidder. <a href="!uses">Uses auction, product and global tokens</a>.', array('!uses' => url('admin/store/help/tokens'))),
        '#default_value' => variable_get('uc_auction_now_notify_bought_msg', uc_get_message('uc_auction_now_notify_bought_msg')),
        '#weight' => 10,
      ),
    );
  }
}
function uc_auction_now_buy_it_now_form($form, &$form_state, $node, $teaser) {
	$form['submit'] = array(
  	'#type' => 'submit',
    '#value' => t('Buy now'),
    '#weight' => 5,
  );
  $form['buy_now_price'] = array(
    '#title' => t('Buy now'),
    '#type' => 'item',
    '#markup' => uc_currency_format($form_state['build_info']['args'][0]->sell_price),
    '#weight' => 0,
  );
  $form['#validate'][] = 'uc_auction_now_validate';
  $form['#submit'][] = 'uc_auction_now_submit';
  $form['#theme'] = 'uc_auction_now_table';
	return $form;
}
/**
 * Save or delete the field settings per the user's request.
 */
function uc_auction_now_field_settings_submit($form, &$form_state) {
  if ($form_state['values']['op'] === t('Reset to defaults')) {
    variable_del('uc_auction_now_field_settings');
  }
  else {
    variable_set('uc_auction_now_field_settings', array(
      'uc_auction_now_box' => $form_state['values']['fields']['uc_auction_now_box'],
    ));
  }
}

/**
 * Make sure it's not too late to buy now.
 */
function uc_auction_now_validate($form, &$form_state) {
  if (REQUEST_TIME > $form_state['build_info']['args'][0]->uc_auction['expiry']) {
    form_set_error('submit', t('Sorry, but this auction has expired. You cannot use the &ldquo;Buy now&rdquo; feature for expired auctions.'));
  }
}

function uc_auction_now_submit($form,&$form_state) {
  uc_cart_add_item($form_state['build_info']['args'][0]->nid);
  $form_state['redirect'] =  variable_get('uc_add_item_redirect', 'cart');
}

/**
 * Implements hook_nodeapi().
 */

function uc_auction_now_node_validate($node,$form,&$form_state){
	if (isset($node->is_auction)) {
		$form_state['values']['buy_now']=$node->is_now;
	}
	else {
		$form_state['values']['buy_now']=false;
	}
}
function uc_auction_now_node_insert($node){
  if(isset($node->is_auction) && $node->is_now){
    $record = array(
      'nid' => $node->nid,
      'bought_now' => 0,
      );
    drupal_write_record('uc_auction_now', $record);
	}
}
function uc_auction_now_node_update($node){
	if(isset($node->is_auction)){
    $current = db_query('SELECT ua.expiry, uan.nid AS bn FROM {uc_auction} ua LEFT JOIN {uc_auction_now} uan ON ua.nid = uan.nid WHERE ua.nid = :nid', array(':nid' => $node->nid))->fetchAssoc();
    if ($current['bn'] === NULL && $node->is_now) {
      // Enabling buy now
      $record = array(
        'nid' => $node->nid,
        'bought_now' => 0,
      );
      drupal_write_record('uc_auction_now', $record);
    }
    elseif ($current['bn'] && !$node->is_now && $current['expiry'] > REQUEST_TIME) {
		  // Disabling buy now
		  // TODO Please review the conversion of this statement to the D7 database API syntax.
		  /* db_query('DELETE FROM {uc_auction_now} WHERE nid = %d', $node->nid) */
		  db_delete('uc_auction_now')->condition('nid', $node->nid)->execute();
    }
	}
}
function uc_auction_now_node_delete($node){
  // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query('DELETE FROM {uc_auction_now} WHERE nid = %d', $node->nid) */
	if(isset($node->is_auction)){
    db_delete('uc_auction_now')->condition('nid', $node->nid)->execute();
	}
}
function uc_auction_now_node_load($nodes,$types){
  foreach($nodes as $node){
    if (isset($node->uc_auction)) {
   		$bn = db_query('SELECT bought_now FROM {uc_auction_now} WHERE nid = :nid', array(':nid' => $node->nid))->fetchAssoc();
      if ($bn) {
        $node->uc_auction['buy_now'] = TRUE;
        $node->uc_auction['bought_now'] = $bn['bought_now'] == 1;
      }
      else {
        $node->uc_auction['buy_now'] = FALSE;
        $node->uc_auction['bought_now'] = FALSE;
      }
    }
	}
}
function uc_auction_now_node_view($node, $view_mode, $langcode){
  if(isset($node->uc_auction)){
 		if(isset($node->uc_auction['buy_now']) && $node->uc_auction['buy_now'] == TRUE){
			if ($node->uc_auction['expiry'] > REQUEST_TIME  && (!variable_get('uc_auction_now_dis_over', TRUE) || $node->sell_price > $node->uc_auction['high_bid_amt'])) {
	 	  	$node->content['uc_auction_now'] = drupal_get_form('uc_auction_now_buy_it_now_form', $node,$view_mode);
	      $node->content['uc_auction_now']['#weight']=-2;
	    }
		}
	}
}

/**
 * Implements hook_theme().
 */
function uc_auction_now_theme($existing, $type, $theme, $path) {
  return array(
    'uc_auction_now_table' => array(
      'render element' => 'form',
    ),
  );
}



/**
 * Theme the "Buy now" table.
 */
function theme_uc_auction_now_table($variables) {
  $form = $variables['form'];
  $bn_t = $form['buy_now_price']['#title'];
  unset($form['buy_now_price']['#title']);
  if (!isset($form['form_token'])) {
    /*Why don't we have a token here?*/
    $form['#token'] = $form['#form_id'];
    $form['form_token'] = array(
      '#id' => drupal_html_id('edit-' . $form['#form_id'] . '-form-token'),
      '#type' => 'token',
      '#default_value' => drupal_get_token($form['#token']),
    );
  }
  $rows = array(
    array(// tr
      array(// th
        'header' => TRUE,
        'data' => $bn_t,
        'class' => 'uc-auction-now-buy-now-hdr',
      ),
      array(// td
        'data' => array($form['buy_now_price']),
        'class' => 'uc-auction-now-buy-now display_price',
      ),
    ),
    array(// tr
      array(// td
        'data' => array($form['submit'],$form['form_build_id'],$form['form_token'],$form['form_id']),
        'class' => 'uc-auction-now-buy-now-submit uc-auction-user-bid-submit',
        'colspan' => 2,
      ),
    ),
  );
  return theme('table', array('header' => array(), 'rows' => $rows, 'attributes' => array('class' => 'uc-auction-now-table uc-auction-bid-table')));
}

/**
 * Implements hook_mail().
 */
function uc_auction_now_mail($key, &$message, $params) {
  if ($key === 'uc_auction_now_bought') {
    $message['body'] = token_replace(
      variable_get('uc_auction_now_notify_bought_msg', uc_get_message('uc_auction_now_notify_bought_msg')),
      array('global' => NULL, 'node' => $params['node'], 'auction' => $params['node'])
    );
    $message['subject'] = token_replace(
      variable_get('uc_auction_now_notify_bought_subj', uc_get_message('uc_auction_now_notify_bought_subj')),
      array('global' => NULL, 'product' => $params['node'], 'auction' => $params['node'])
    );
  }
}

/* Ubercart Auction hooks *************************************************** */

/**
 * Implements hook_auc_remove() (an Ubercart Auction hook)().
 */
function uc_auction_now_auc_remove($node, $deletion) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {uc_auction_now} WHERE nid = %d', $node->nid) */
  db_delete('uc_auction_now')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_auc_message_alter() (an Ubercart Auction hook)().
 */
function uc_auction_now_auc_message($node) {
  if ($node->uc_auction['bought_now']) {
    global $user;
    if ($node->uc_auction['high_bid_uid'] == $user->uid) {
      drupal_set_message(t('This auction ended when you purchased the product using the &ldquo;Buy Now&rdquo; feature.'));
    }
    else {
      drupal_set_message(t('This auction ended when another user purchased the product using the &ldquo;Buy Now&rdquo; feature.'), 'warning');
      return FALSE;
    }
  }
}

/* Ubercart hooks *********************************************************** */

/**
 * Implements hook_cart_item() (an Ubercart hook)().
 *
 * I don't really like how this is adding yet another query to things, but…
 */
function uc_auction_now_uc_cart_item($op, $item) {
  if ($op === 'load' && $item->is_auc) {
    // If the item hasn't expired yet and it's a Buy Now item…
    $query = db_select('uc_auction','ua')->fields('ua',array('expiry'));
    $query->leftjoin('uc_auction_now','uan','ua.nid = uan.nid');
    $query->condition('ua.nid',$item->nid,'=');
    $info = $query->execute()->fetchObject();
    if ($info && $info->expiry > REQUEST_TIME) {
      $item->price = $item->sell_price;
      $item->display_price = $item->price;
    }
  }
}

/**
 * Implements hook_order() (an Ubercart hook)().
 */
function uc_auction_now_uc_order($op, &$arg1, $arg2) {
  if ($op === 'submit') {
    // Check to see if this is a Buy Now product; if so, end the auction
    // Get nids of products
    $nids = array();
    foreach ($arg1->products as $key => $product) {
      $nids[$key] = $product->nid;
      // This falls apart if the buyer has purchased two of the same node at
      // different prices; it also doesn't account for quantity. @TODO: Is this
      // a problem?
    }
    // See if any of the nids are in {uc_auction_now}
    $rez = db_select('uc_auction_now','uan')->fields('uan',array('nid'))->condition('nid', array_values($nids),'IN')->execute();
    $ng = array();
    $nodes = array();
    foreach ($rez as $nid) {
      // …So this is a Buy Now product.
      // Insert a bid for the value of the Buy Now price.
      $node = node_load($nid->nid);
      // Make sure this purchase is still valid
      if (REQUEST_TIME >= $node->uc_auction['expiry']) {
        $ng[] = $node;
      }
      elseif (count($ng) === 0) {
        $nodes[] = $node;
      }
    }
    if (count($ng) === 0) {
      // Okay, the user isn't trying to buy anything they shouldn't.
      foreach ($nodes as $node) {
        $bid_record = array(
          'nid' => $node->nid,
          'uid' => $arg1->uid,
          'time' => REQUEST_TIME,
          'amount' => $node->sell_price,
        );
        $outbid = $node->uc_auction['high_bid_uid'];
        $response = module_invoke_all('bid_alter', $node, $bid_record);
        if (!in_array(FALSE, $response, TRUE)) {
          uc_auction_insert_bid($bid_record, array('expiry' => REQUEST_TIME, 'notified' => 1));
          $buy_record = array(
            'nid' => $node->nid,
            'bought_now' => 1,
          );
          drupal_write_record('uc_auction_now', $buy_record, 'nid');
          if (variable_get('uc_auction_notify_outbid', TRUE) && $outbid != 0) {
            // TODO Convert "user_load" to "user_load_multiple" if "$outbid" is other than a uid.
            // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
            // Example: array_shift(user_load_multiple(array(), $outbid))
            $outbid_user = user_load($outbid);
            if (!isset($outbid_user->uc_auction_notify_outbid) || $outbid_user->uc_auction_notify_outbid) {
              drupal_mail('uc_auction_now', 'uc_auction_now_bought', $outbid_user->mail, user_preferred_language($outbid_user), array('node' => $node, 'user' => $outbid_user));
              watchdog('uc auction now', 'Outbid via "Buy Now" notification for !item sent to @user.', array('@user' => $outbid_user->name, '!item' => l($node->title, "node/{$node->nid}")));
            }
          }
        }
      }
    }
    else {
      // Some of the things the user is trying to Buy Now are not allowed.
      $item_links = '<ul>';
      foreach ($ng as $item) {
        $item_links .= '<li>' . l($node->title, "node/{$node->nid}") . '</li>';
      }
      $item_links .= '</ul>';
      return array(
        array(
          'pass' => FALSE,
          'message' => format_plural(count($ng), 'Your order could not continue because one of the items you are trying to purchase using the &ldquo;Buy Now&rdquo; feature cannot be purchased because it has expired. Please remove the item from <a href="!cart">your cart</a> to continue. The item is:!items', 'Your order could not continue because some of the items you are trying to purchase using the &ldquo;Buy Now&rdquo; feature cannot be purchased because they have expired. Please remove the items from <a href="!cart">your cart</a> to continue. The items are:!items', array('!cart' => url('cart'), '!items' => $item_links)),
        ),
      );
    }
  }
}

/**
 * Implements hook_uc_message() (an Ubercart hook)().
 */
function uc_auction_now_uc_message() {
  return array(
    'uc_auction_now_notify_bought_subj' => t('[auction-product-name] at [store-name] was bought by another user'),
    'uc_auction_now_notify_bought_msg' => t("Another site user purchased a product up for auction at [store-name] by using the \"Buy Now\" feature.\n\nThis means that the item is no longer up for auction. Sorry!\n\nProduct: [auction-product-name]\n\n -- [store-owner]\n\nIf you would prefer not to receive these notifications, log in to your user account at [store-name] and click the \"Edit\" tab. Then uncheck the \"Notify me by email when I'm outbid on an auction\" check box.\n[site-login-url]"),
  );
}

/* Views hooks ************************************************************** */

/**
 * Implements hook_views_api().
 */
function uc_auction_now_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'uc_auction_now') . '/views',
  );
}
