<?php 

/**
* Implements hook_block_info().
*/

function coins_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode == 'teaser' && $entity->type == 'coin' && isset($entity->content['field_coin'])) {
      if(count($entity->content['field_coin']) > 1 ) {
        $entity->content['field_coin']['#items'] = array_slice($entity->content['field_coin']['#items'], 0, 2);
      }
    }
}

function coins_block_info() {
  $blocks = array();
  $blocks['UserActions'] = array(
    'info' => t('User Actions'),
  );

  $blocks['UserCollection'] = array(
    'info' => t('User Collection'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function coins_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'UserActions':
      $block['subject'] = '';
      $block['content'] = _ua_block();
      break;

    case 'UserCollection':
      $block['subject'] = '';
      $block['content'] = _uc_block();
      break;
  }

  return $block;
}

function _ua_block() {
  $output = '<nav></nav><ul><li>' . l(t('Add coin'), '/node/add/coin', array('attributes' => array('class' => array('')))) . '</li>';
  $output = $output . '<li>' . l(t('Create album'), '/node/add/album', array('attributes' => array('class' => array('')))) . '</li></ul></nav>';
  return $output;
}

function _uc_block() {
  global $user;
  $username = $user->name;

  $output = '<nav></nav><ul><li>' . l(t('My albums'), '/user/' . $username  . '/albums', array('attributes' => array('class' => array('')))) . '</nav>';
  //$output = $output . '<li>' . l(t('Create album'), '/node/add/album', array('attributes' => array('class' => array('')))) . '</li></ul></nav>';
  return $output;
}

function coins_form_alter(&$form, &$form_state, $form_id) {
  $STARTED_USER_COINS_LIMIT = 3;
  $STARTED_USER_ALBUMS_LIMIT = 2;

  global $user;
  $current_user = $user->uid;

  if ($form['#id'] == 'coin-node-form' && $form['nid']['#value'] == NULL) {
    dsm($form);  // pretty print array using Krumo to messages
    $query = db_select('node', 'n');
    $query->condition('n.type', 'coin');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $coins_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.coins)');
    $coins_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('coins count: ' . $coins_count, 'warning');

    if ($coins_count >= $STARTED_USER_COINS_LIMIT + $coins_bonuslimit) {
      drupal_set_message(t('Out of coins limit'), 'warning');
      drupal_goto('/node');
    }
  }

  if ($form['#id'] == 'album-node-form' && $form['nid']['#value'] == NULL) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'album');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $albums_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.albums)');
    $albums_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('albums count: ' . $albums_count, 'warning');

    if ($albums_count >= $STARTED_USER_COINS_LIMIT + $albums_bonuslimit) {
      drupal_set_message(t('Out of albums limit'), 'warning');
      drupal_goto('/node');
    }
  }

  if ($form['#id'] == 'views-exposed-form-mycoinslist-entityreference-view-widget-1') {

    $quartiers[] = array('ALL' => t('- Any -'));
    unset ($form['my_almum_title']);

    global $user;
    $current_user = $user->uid;

    $result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.type', 'album')
      ->condition('n.status', '1')
      ->condition('n.uid', $current_user)
      ->execute();

    $dropdown_array = array('' => t('- Any -'));

    foreach ($result as $node) {
      $dropdown_array[$node->title] = $node->title;
    }

    $form['my_almum_title'] = array(
      '#type' => 'select',
      '#default_value' => '1',
      '#options' => $dropdown_array,
    );
  }
}