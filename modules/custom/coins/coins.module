
<?php
$GLOBALS['started_user_coins_limit'] = 100;
$GLOBALS['started_user_albums_limit'] = 2;

function coins_menu() {
    $items = array();

    $items['user/my-limits'] = array(
    'title' => 'My limits',
    'page callback' => '_my_limits',
        'access callback' => TRUE, //'user_is_logged_in'
    );

    return $items;
}

function _my_limits () {
    global $user;
    $current_user = $user->uid;

    $query = db_select('node', 'n');
    $query->condition('n.type', 'coin');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $coins_count = $query->execute()->fetchField();
    if(!$coins_count) {
        $coins_count = 0;
    }

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.coins)');
    $coins_bonuslimit = $query->execute()->fetchField();
    if(!$coins_bonuslimit){
        $coins_bonuslimit = 0;
    }

    $query = db_select('node', 'n');
    $query->condition('n.type', 'album');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $albums_count = $query->execute()->fetchField();
    if(!$albums_count) {
        $albums_count = 0;
    }

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.albums)');
    $albums_bonuslimit = $query->execute()->fetchField();
    if(!$albums_bonuslimit){
        $albums_bonuslimit = 0;
    }

    $output ='<h6>' .t('Coins: ') . '<b>' . (intval($GLOBALS['started_user_coins_limit']) + intval($coins_bonuslimit) - intval($coins_count)) . '</b>' . t(' left (started limit: '). $GLOBALS['started_user_coins_limit']
  . t(' + your purchased bonuses: ') . $coins_bonuslimit . t(' - already added coins: ') . $coins_count .')<h6>';
$output = $output . '<h6>' .t('Albums: ') . '<b>' . (intval($GLOBALS['started_user_albums_limit']) + intval($albums_bonuslimit) - intval($albums_count)) . '</b>' . t(' left (started limit: '). $GLOBALS['started_user_albums_limit']
  . t(' + your purchased bonuses: ') . $albums_bonuslimit . t(' - already added albums: ') . $albums_count .')<h6>';
$output = $output . l(t('Raise limits'), '/buy', array('attributes' => array('class' => array('btn', 'btn-default'))));
    return $output;
}

/**
* Implements hook_block_info().
*/
function generateRandomString($length = 24) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

function generateRandomClass($length = 24) {
    $characters = 'abcdefghijklmnopqrstuvwxyz';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

function coins_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode == 'teaser' && $entity->type == 'coin' && isset($entity->content['field_coin'])) {
      if(count($entity->content['field_coin']) > 1 ) {
        $entity->content['field_coin']['#items'] = array_slice($entity->content['field_coin']['#items'], 0, 2);
      }
    }
}

function coins_block_info() {
  $blocks = array();

    $blocks['UserActions'] = array(
        'info' => t('User Actions'),
    );

    $blocks['UserLimits'] = array(
        'info' => t('User Limits'),
    );

    $blocks['Catalog'] = array(
        'info' => t('Catalog'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    $blocks['WritePM'] = array(
        'info' => t('Write private message to user'),
    );

    $blocks['MiniCart'] = array(
        'info' => t('Mini cart'),
    );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function coins_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'UserActions':
      $block['subject'] = '';
      $block['content'] = _ua_block();
      break;

    case 'UserLimits':
      $block['subject'] = '';
      $block['content'] = _ulimits_block();
      break;

      case 'Catalog':
          $block['subject'] = '';
          $block['content'] = coins_taxonomy_tree(1);
          break;

      case 'WritePM':
          $block['subject'] = '';
          $block['content'] = _write_pm_block();
          break;

      case 'MiniCart':
          $block['subject'] ='';
          $block['content'] =_mini_cart_block();
          break;
  }

  return $block;
}

function _mini_cart_block() {
    global $user;
    $product_count = count(uc_cart_get_contents());

    $items = FALSE;
    $item_count = 0;
    $total = 0;

    if ($product_count) {
        $display_items = entity_view('uc_cart_item', uc_cart_get_contents(), 'cart');
        foreach (element_children($display_items['uc_cart_item']) as $key) {
            $display_item = $display_items['uc_cart_item'][$key];
           // dsm($display_item);
            $picture = uc_product_get_picture($display_item['nid']['#value'], 'uc_cart');
            $file = file_load($picture['#item']['fid']);

            if($file) {
                $uri = $file->uri;
                $img = '<img src=\'' . image_style_url("profile_picture", $uri) . '\' />';
            } else {
                $img = '';
            }

            $node = node_load($display_item['nid']['#value']);
            $title = $node->title;

            if (count(element_children($display_item))) {
                $items[] = array(
                    'nid' => $display_item['nid']['#value'],
                    'qty' => theme('uc_qty', array('qty' => $display_item['qty']['#default_value'])),
                    'title' => $display_item['title']['#markup'],
                    'price' => $display_item['#total'],
                    'desc' => isset($display_item['description']['#markup']) ? $display_item['description']['#markup'] : FALSE,
                );
                $total += $display_item['#total'];
                $item_count += $display_item['qty']['#default_value'];
            }

        }

        $cart_text = '<i class="icon ion-android-cart"></i><span>' . $item_count . t(' item, subtotal: $') . $total . '</span>';
        $hover_text =  $img . ' ' . $title;
        $output = '<a href="/cart" class="cart-nav-link tooltipped" data-position="bottom" data-delay="50" data-tooltip="' . $hover_text . '">' . $cart_text . '</a>';

        return $output;
    } else {
        return '';
    }
}

function _write_pm_block() {
    $userpageload = user_load(arg(1));
    if ($userpageload) {
        $viewed_user = $userpageload->uid;

        global $user;
        $current_user = $user->uid;
        if ($current_user == $viewed_user) {
            return '';
        }

        $output = '<a href="/messages/new/1">Write pm to user</a>';
        dsm($viewed_user);
        return $output;
    } else {
        return '';
    }
}

function _ua_block() {
    global $user;
    $current_user = $user->uid;

    $output = '<nav></nav><ul><li><a href="/node/add/coin"><i class="icon ion-plus-circled"></i>' . t('Add coin') . '</a></li>';
    $output = $output . '<li><a href="/node/add/album"><i class="icon ion-ios-photos"></i><i class="icon ion-plus-circled"></i>' . t('Create album') . '</a></li>';
    $output = $output . '<li class="separator"></li>';
    $output = $output . '<li><a href="/user/my-coins"><i class="icon ion-social-euro"></i>' . t('My coins') . '</a></li>';
    $output = $output . '<li><a href="/user/' . $current_user . '/undefined-coins"><i class="icon ion-ios-help"></i>' . t('My undefined coins') . '</a></li>';
    $output = $output . '<li><a href="/user/my-albums"><i class="icon ion-ios-photos"></i>' . t('My albums') . '</a></li>';
    $output = $output . '<li class="separator"></li>';
    $output = $output . '<li><a href="/user/my-coins/sales"><i class="icon ion-social-usd"></i>' . t('My sales') . '</a></li>';
    $output = $output . '<li><a href="/user/my-auctions"><i class="icon ion-arrow-graph-up-right"></i>' . t('My auctions') . '</a></li>';
    $output = $output . '<li><a href="/user/my-orders"><i class="icon ion-bag"></i>' . t('My orders') . '</a></li>';
    $output = $output . '<li><a href="/user/' . $user->uid .'/auctions"><i class="icon ion-clock"></i>' . t('My last bids') . '</a></li>';
    $output = $output . '<li><a href="/user/' . $current_user . '/wishlist"><i class="icon ion-heart"></i>' . t('My wishlist') . '</a></li>';
    $output = $output . '<li class="separator"></li>';
    $output = $output . '<li><a href="/user"></i>' . t('My profile') . '</a></li>';
    $output = $output . '<li><a href="/user/logout">' . t('Logout') . '</a></li>';
    $output = $output . '</ul></nav>';
    return $output;
}

/*function _uc_block() {


    $output = '<nav></nav><ul>';

    $output = $output . '<li>' . l(t('Orders of my coins'), '/user/my-coins/orders', array('attributes' => array('class' => array('')))) . '</li>';
    $output = $output . '<li>' . l(t('My auctions'), '/user/my-auctions', array('attributes' => array('class' => array('')))) . '</li></ul></nav>';

  return $output;
}*/

function _ulimits_block() {
  global $user;
  $current_user = $user->uid;

    function hook_uc_addresses_address_load($address, $obj) {
        // Example: set a value for my custom added field (through hook_uc_addresses_fields()).
        $address->setField('myfield', 'myvalue');
    }

  $query = db_select('node', 'n');
  $query->condition('n.type', 'coin');
  $query->condition('n.uid', $current_user);
  $query->addExpression('COUNT(*)');
  $coins_count = $query->execute()->fetchField();
  if(!$coins_count) {
    $coins_count = 0;
  }

  $query = db_select('node', 'n');
  $query->condition('n.type', 'album');
  $query->condition('n.uid', $current_user);
  $query->addExpression('COUNT(*)');
  $albums_count = $query->execute()->fetchField();
  if(!$albums_count) {
    $albums_count = 0;
  }

  $file = file_load($user->picture);


  if($file) {
      $uri = $file->uri;
      $img = image_style_url("profile_picture", $uri);
  } else {
      $img = "/sites/default/files/profile.png";
   }

  $output = '<div class="media"><div class="media-left"><a href="#"><img class="media-object" src="' . $img . '" alt="avatar"></a></div>';
  $output = $output . '<div class="media-body"><h4 class="media-heading">' . $user->name .'</h4>';
  $output = $output . $coins_count . ' ' . t('coins(s)') . ' / ' . $albums_count . ' ' . t('album(s)') . ' <sup><a href="/user/my-limits"><i class="icon ion-help-circled"></i></a></sup>';
  $output = $output . userpoints_get_current_points($user->uid, 'all') . ' ' . t('user points') . ' <sup><a href="/user/' . $user->uid . '/points"><i class="icon ion-help-circled"></i></a></sup>';
  $output = $output .  '</div></div>';
  return $output;
}

function coins_form_privatemsg_new_alter(&$form, &$form_state, $form_id) {
    // Check if a default value is configured for the to field.
    if (!empty($form['recipient']['#default_value'])) {
        // Convert the recipient field to a value type and force the default value.
        $form['recipient']= array(
            '#type' => 'textfield',
            '#value' => $form['recipient']['#default_value'],
            '#title' => 'Send message to',
            '#disabled'=> TRUE,
            '#weight' => -10,
        );
    }
}

function coins_taxonomy_tree($vid) {
    $terms = db_query("
    SELECT td.tid, td.name, td.description, th.parent, f.field_cover_image_fid, (
      SELECT COUNT(*) FROM {taxonomy_index} ti
      LEFT JOIN {node} n ON ti.nid = n.nid
      WHERE ti.tid = td.tid AND n.status = 1
    ) node_count FROM {taxonomy_term_data} td
    INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = td.tid
    LEFT JOIN {field_data_field_cover_image} f ON f.entity_id = td.tid
    WHERE vid = :vid
    ORDER BY weight
  ", array(':vid' => $vid))->fetchAll();

    //dsm($terms);
    $output = '<div id="catalog"><div id="catalog-nav"></div>';
    $output = $output  . '<div class="empty-switch switch"><label>Show empty items<input type="checkbox" checked="checked"><span class="lever"></span></label></div>';
    $output = $output  . '<div id="catalog-tree">' . theme('item_list', array('items' => _coins_taxonomy_tree($terms)));
    $output = $output . '</div></div>';
    return $output;
}

/**
 * Helper for mymodule_taxonomy_tree()
 */
function _coins_taxonomy_tree($terms, $parent = 0, &$node_count = 0) {
    $items = array();
    $node_count = 0;

    foreach ($terms as $term) {
       // dsm($term);
        if ($term->parent == $parent) {
            $children = _coins_taxonomy_tree($terms, $term->tid, $childs_node_count);
            $node_count += $term->node_count + $childs_node_count;
            $is_empty_class = '';

            if (intval($term->node_count + $childs_node_count) == 0) {
                $is_empty_class = ' is-empty';
            }

            if ($term->field_cover_image_fid) {
                $file = file_load($term->field_cover_image_fid);
                $uri = $file->uri;
                $img_url = file_create_url($uri);
                $img = '<img class="activator" src="' . image_style_url("taxonomy_card", $img_url) . '"/>';
            } else {
                $img = '<img class="activator" src="http://placekitten.com/g/280/280"/>'; //TODO
            }

            $class_name = generateRandomClass();
            $cardtemplate = '<div class="card'  . $is_empty_class .'" data-cardid="' .$class_name . '"><div class="card-image waves-effect waves-block waves-light"><a data-cardid="' .$class_name . '" class="card-link" href="/taxonomy/term/' .$term->tid  . '">' . $img . '<span class="card-hidden-title">' . $term->name . '</span></a></div>';
            $cardtemplate = $cardtemplate . '<div class="card-content"><span class="card-title">' . $term->name . '</span>';

            if ($term->description) {
                $cardtemplate = $cardtemplate . '<span class="card-title activator grey-text text-darken-4"><i class="icon ion-android-more-vertical"></i></span>';
            }

            $cardtemplate = $cardtemplate . '<p>' . ($term->node_count + $childs_node_count) .'</p></div>';

            if ($term->description) {
                $cardtemplate = $cardtemplate . '<div class="card-reveal"><span class="card-title grey-text text-darken-4">' . $term->name . '<i class="icon ion-android-close"></i></span>';
                $cardtemplate = $cardtemplate . $term->description . '</div>';
            }

            $cardtemplate = $cardtemplate . '</div>';


            $items[] = array(
                //'data' =>  '<a href="/taxonomy/term/' . $term->tid  . '" class="' . generateRandomClass() . '">'  . $term->name .'</a>',
                'data' =>  $cardtemplate,
                'children' => $children,
            );
        }
    }

    return $items;
}

//echo mymodule_taxonomy_tree(1);

function coins_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $current_user = $user->uid;

  // EDIT OR NEW
  if ($form['#id'] == 'coin-node-form') {
    $form['base']['prices']['list_price'] = FALSE;
    $form['base']['prices']['cost'] = FALSE;
    $form['base']['shippable'] = FALSE;
    $form['base']['weight'] = FALSE;
    $form['base']['dimensions'] = FALSE;
    $form['base']['pkg_qty'] = FALSE;
    $form['base']['ordering'] = FALSE;

    $form['base']['prices']['sell_price']['#description'] = t('Customer purchase price or "Buy it now" price');

      /*
    $form['base']['ordering'] = FALSE;
    $form['base']['weight']['weight_units']['#disabled'] = TRUE;
    $form['base']['dimensions']['length_units']['#disabled'] = TRUE;
    $form['base']['pkg_qty'] = FALSE;

      $form['base']['dimensions']['dim_width'] = FALSE;
      $form['base']['dimensions']['dim_length']['#title'] =  t('Diameter'); */


    if (isset($form['field_sell_item']) && $form['field_sell_item']['und']['#default_value'] == 1) {
      $form['#attributes']['class'][] = 'coin-form just-sell';
      //$form['base']['prices']['sell_price']['#required'] = TRUE;
    } else {
      $form['#attributes']['class'][] = 'coin-form';
      //$form['base']['prices']['sell_price']['#required'] = FALSE;
    }
  }

  //EDIT
  if ($form['#id'] == 'coin-node-form' && $form['nid']['#value'] != NULL) {
        $node = node_load($form['nid']['#value']);
        if (isset($node->uc_auction['expiry'])) {
            $expiry = $node->uc_auction['expiry'];
            $now = time();
            $hours_passed = abs(round(($expiry - $now)/3600));
            //disallow user to edit finished auction item
            // need to waint 24h
            if (($expiry - $now) < 0 && $hours_passed < 24 && !in_array('Admin', $user->roles)) {
                drupal_set_message(t("Auction finished, you can't edit coin for 24hours"), 'warning');
                drupal_goto($_SERVER['HTTP_REFERER']);
            }

            if ($expiry > $now && !in_array('Admin', $user->roles)) {
                //disallow user to edit active auction item
                drupal_set_message(t("You can't edit active auction. Please write to support, if you need to change something"), 'warning');
                drupal_goto($_SERVER['HTTP_REFERER']);
            }
        }
  }

  //NEW
  if ($form['#id'] == 'coin-node-form' && $form['nid']['#value'] == NULL) {

    $form['base']['prices']['sell_price']['#required'] = FALSE;
    //$form['base']['prices']['sell_price']['#attributes']['readonly'] = 'readonly';

    $query = db_select('node', 'n');
    $query->condition('n.type', 'coin');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $coins_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.coins)');
    $coins_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('coins count: ' . $coins_count, 'warning');

    if ($coins_count >= $GLOBALS['started_user_coins_limit'] + $coins_bonuslimit) {
      drupal_set_message(t('Out of coins limit'), 'warning');
      drupal_goto('/node');
    }

    //ALTER PRODUCT FORM
    $form['base']['model']['#default_value'] = generateRandomString();
    $form['#attributes']['class'][] = 'coin-form';


  }

  if ($form['#id'] == 'album-node-form' && $form['nid']['#value'] == NULL) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'album');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $albums_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.albums)');
    $albums_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('albums count: ' . $albums_count, 'warning');

    if ($albums_count >= $GLOBALS['started_user_albums_limit'] + $albums_bonuslimit) {
      drupal_set_message(t('Out of albums limit'), 'warning');
      drupal_goto('/node');
    }
  }

  if ($form['#id'] == 'views-exposed-form-mycoinslist-entityreference-view-widget-1' || $form['#id'] == 'views-exposed-form-my-coins-page') {

    //$quartiers[] = array('ALL' => t('- Any -'));
    //unset ($form['my_album_title']);

    global $user;
    $current_user = $user->uid;

    $result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.type', 'album')
      ->condition('n.status', '1')
      ->condition('n.uid', $current_user)
      ->execute();

    $dropdown_array = array('' => t('- Any -'));

    foreach ($result as $node) {
      $dropdown_array[$node->title] = $node->title;
    }

    $form['my_album_title'] = array(
        //'#description'=> t('Filter by your albums'),
        '#type' => 'select',
        '#default_value' => '1',
        '#options' => $dropdown_array,

    );

    //$form['my_album_title']['#description'] = t('Filter by your albums');
  }

  if ($form['#id'] == 'views-exposed-form-my-coins-page') {
      //dsm($form);
     // $form['shs_term_node_tid_depth']['#description'] = t('Filter by type');
  }



  if ($form['#id'] == 'uc-order-view-update-form') {

      //dsm($form);
      $current_status = $form['current_status']['#value'];
      $order = $form['order_id']['#value'];
      //if ($current_status != 'Was received' && )

      $query = db_select('uc_order_products', 'op');
      $query->fields('op', array('nid'));
      $query->condition('op.order_id', $order);
      $nid = $query->execute()->fetchField();

      $query = db_select('uc_orders', 'o');
      $query->fields('o', array('uid'));
      $query->condition('o.order_id', $order);
      $uid = $query->execute()->fetchField();


      if($nid !== FALSE) {
          $node = node_load($nid);
          $author = $node->uid;
          $options = $form['controls']['status']['#options'];


          if ($author == $current_user) {
              //action for seller
              dsm('SELLER');
              unset($options['abandoned']);
              unset($options['canceled']);
              unset($options['pending']);
              unset($options['in_checkout']);
              unset($options['was_payed']);
              unset($options['processing']);
              unset($options['completed']);
              unset($options['paypal_pending']);
              unset($options['was_received']);
              $form['controls']['status']['#options'] = $options;

          } else if ($uid == $current_user ) {
              //action for buyer
              dsm('Buyer');

              unset($options['abandoned']);
              unset($options['canceled']);
              unset($options['pending']);
              unset($options['in_checkout']);
              unset($options['processing']);
              unset($options['completed']);
              unset($options['paypal_pending']);
              unset($options['has_been_sent']);
              unset($options['payment_received']);
              $form['controls']['status']['#options'] = $options;
          } else if ($author == $current_user && $uid == $current_user) {
              dsm('new owner');
              unset($options);
          } else {
              //action for someone else
              drupal_goto('/403');
          }
      }
/*
 * <option value="abandoned">Abandoned</option>
<option value="canceled">Canceled</option>
<option value="in_checkout">In checkout</option>
<option value="pending" selected="selected">Pending</option>
<option value="was_payed">Was paid</option>
<option value="processing">Processing</option>
<option value="completed">Completed</option>
<option value="paypal_pending">PayPal pending</option>
<option value="payment_received">Payment received</option>
<option value="has_been_sent ">Has been sent </option>
<option value="was_received ">Was received </option>
 */
  }

  if ($form['#id'] == 'webform-client-form-967') {
        $form['submitted']['page_title']['#default_value'] = drupal_get_title();
        $form['submitted']['page_url']['#default_value'] = request_path();

        $form['submitted']['page_title']['#access'] = FALSE;
        $form['submitted']['page_url']['#access'] = FALSE;
  }

  //coin clone hook
  if (!empty($form['#node']->clone_from_original_nid)) {
      $form['base']['model']['#access'] = FALSE;
      $form['base']['prices']['sell_price']['#default_value'] = '';
      $form['base']['prices']['sell_price']['required'] = FALSE;
      $form['field_sell_item']['und']['#default_value'] = 0;
  }


}

function coins_node_validate($node, $form, &$form_state) {
   /* if (isset($node->end) && isset($node->start)) {
        if ($node->start > $node->end) {
            form_set_error('time', t('An event may not end before it starts.'));
        }
    }*/
    if ($node->type == 'coin') {
        //dsm($node);
        //dsm($form);
        //dsm($form_state);
        //form_set_error('time', t('An event may not end before it starts.'));

        if ($node->field_sell_item['und']['0']['value'] == 1) {
            //user want just to sell
            if (intval($node->sell_price) <= 0) {
                //price is empty or 0
                $form['base']['prices']['sell_price']['#required'] = TRUE;
                form_set_error('sell_price', t('Sell price required & must be positive'));
            }

            if ($node->is_auction == 1) {
                dsm('is auc');
                form_set_error('is_auction', t('You must disable auction if you want just to sell'));
            }
        }

        if ($node->is_auction && $node->is_now) {
            //auction & buy it now
            if (intval($node->sell_price) == 0) {
                //price empty
                $form['base']['prices']['sell_price']['#required'] = TRUE;
                form_set_error('sell_price', t('Sell price required for "Buy it now" option'));
            }

        }
    }
}

/**
 * Implements hook_rules_condition_info().
 */
function coins_rules_condition_info() {
    return array(
        'rules_condition_order_qty' => array(
            'label' => t('Evaluate shopping cart quantity'),
            'parameter' => array(
                'cart_id' => array(
                    'label' => t('Cart ID'),
                    'type' => 'text',
                ),
                'max_cart_qty' => array(
                    'label' => t('Maximum Cart Quantity'),
                    'type' => 'text',
                ),
            ),
            'group' => t('Cart'),
            'callbacks' => array(
                'execute' => 'cart_is_maxed_out',
            ),
        ),
    );
}

function coins_rules_action_info() {
    $actions = array(
        'coins_action_hello_user' => array(
            'label' => t('Delete last added item'),
            'group' => t('Coins rules'),
            'callbacks' => array(
                'execute' => 'cart_is_maxed_out_delete',
            ),

        ),
    );
    return $actions;
}

/**
 * Return true if cart quantity exceeds maximum cart quantity set in the rule.
 */
function cart_is_maxed_out($cart_id, $max_cart_qty) {
    $query = db_select('uc_cart_products');
    $query->condition('cart_id', $cart_id);
    $query->addExpression('SUM(qty)');
    $result = $query->execute()->fetchField();

    if ($result >= $max_cart_qty) {

        return TRUE;
    }

    return FALSE;
}

function cart_is_maxed_out_delete() {
    global $user;
    $current_user = $user->uid;

    $query = db_select('uc_cart_products', 'u');
    $query->fields('u', array('cart_item_id'));
    $query->condition('u.cart_id', $current_user);
    $query->range(0, 1);
    $query->orderBy('u.changed', 'DESC');
    $result = $query->execute()->fetchField();

    db_delete('uc_cart_products')
        ->condition('cart_item_id', $result)
        ->execute();

    return true;
}

function coins_clone_node_alter(&$node, $context) {
   // dsm($context);
    //dsm($form);

    //$context->sell_item['und']['0']['value'] = 0;
}
