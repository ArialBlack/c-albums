<?php 

/**
* Implements hook_block_info().
*/
function generateRandomString($length = 24) {
  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_';
  $charactersLength = strlen($characters);
  $randomString = '';
  for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, $charactersLength - 1)];
  }
  return $randomString;
}

function coins_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode == 'teaser' && $entity->type == 'coin' && isset($entity->content['field_coin'])) {
      if(count($entity->content['field_coin']) > 1 ) {
        $entity->content['field_coin']['#items'] = array_slice($entity->content['field_coin']['#items'], 0, 2);
      }
    }
}

function coins_block_info() {
  $blocks = array();
  $blocks['UserActions'] = array(
    'info' => t('User Actions'),
  );

  $blocks['UserCollection'] = array(
    'info' => t('User Collection'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function coins_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'UserActions':
      $block['subject'] = '';
      $block['content'] = _ua_block();
      break;

    case 'UserCollection':
      $block['subject'] = '';
      $block['content'] = _uc_block();
      break;
  }

  return $block;
}

function _ua_block() {
  $output = '<nav></nav><ul><li>' . l(t('Add coin'), '/node/add/coin', array('attributes' => array('class' => array('')))) . '</li>';
  $output = $output . '<li>' . l(t('Create album'), '/node/add/album', array('attributes' => array('class' => array('')))) . '</li></ul></nav>';
  return $output;
}

function _uc_block() {
  global $user;
  $username = $user->name;

  $output = '<nav></nav><ul><li>' . l(t('My albums'), '/user/' . $username  . '/albums', array('attributes' => array('class' => array('')))) . '</li>';
  $output = $output . '<li>' . l(t('My coins'), '/user/' . $username  . '/coins', array('attributes' => array('class' => array('')))) . '</li></ul></nav>';
  return $output;
}

function coins_form_alter(&$form, &$form_state, $form_id) {
  $STARTED_USER_COINS_LIMIT = 10;
  $STARTED_USER_ALBUMS_LIMIT = 2;

  global $user;
  $current_user = $user->uid;

  if ($form['#id'] == 'coin-node-form') {
    if ($form['nid']['#value'] == NULL) {
      $is_product = 0;
    } else {
      $is_product = db_select('uc_products', 'p')
        ->fields('p', array('is_product'))
        ->condition('p.nid', $form['nid']['#value'])
        ->execute()
        ->fetchField();

      //ALTER PRODUCT FORM
      $form['base']['model']['#default_value'] = generateRandomString();
      $form['base']['model']['#access'] = FALSE;
      dsm($form);
      $form['base']['prices']['list_price'] = FALSE;
      $form['base']['prices']['cost'] = FALSE;
      $form['base']['shippable'] = FALSE;
      $form['base']['ordering'] = FALSE;
      $form['base']['weight']['weight_units']['#disabled'] = TRUE;
      $form['base']['dimensions']['length_units']['#disabled'] = TRUE;
      $form['base']['pkg_qty'] = FALSE;
    }

    $form['base']['is_product'] = array(
      "#type" => "checkbox",
      "#title" => t('I want to sell this coin'),
      "#default_value" => $is_product,
      "#disabled" => 0,
      "#description" => null,
      "#weight" => -2
    ) ;

    if ($is_product == 1) {
      $form['#attributes']['class'][] = 'coin-form is-product';
    } else {
      $form['base']['prices']['sell_price']['#required'] = TRUE;
    }
  }

  if ($form['#id'] == 'coin-node-form' && $form['nid']['#value'] != NULL) {
    $form['#submit'][] = 'coins_form_alter_submit_handler_update';
  }

  if ($form['#id'] == 'coin-node-form' && $form['nid']['#value'] == NULL) {
    $is_product = 0;

    $query = db_select('node', 'n');
    $query->condition('n.type', 'coin');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $coins_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.coins)');
    $coins_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('coins count: ' . $coins_count, 'warning');

    if ($coins_count >= $STARTED_USER_COINS_LIMIT + $coins_bonuslimit) {
      drupal_set_message(t('Out of coins limit'), 'warning');
      drupal_goto('/node');
    }

    //ALTER PRODUCT FORM
    $form['base']['model']['#default_value'] = generateRandomString();
    $form['base']['model']['#access'] = FALSE;
    dsm($form);
    $form['base']['prices']['list_price'] = FALSE;
    $form['base']['prices']['cost'] = FALSE;
    $form['base']['prices']['cost'] = FALSE;
    $form['base']['prices']['sell_price']['#required'] = FALSE;
    $form['base']['shippable'] = FALSE;
    $form['base']['ordering'] = FALSE;
    $form['base']['weight']['weight_units']['#disabled'] = TRUE;
    $form['base']['dimensions']['length_units']['#disabled'] = TRUE;
    $form['base']['pkg_qty'] = FALSE;

    $form['#attributes']['class'][] = 'coin-form';
    $form['#submit'][] = 'coins_form_alter_submit_handler_add';

  }

  if ($form['#id'] == 'album-node-form' && $form['nid']['#value'] == NULL) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'album');
    $query->condition('n.uid', $current_user);
    $query->addExpression('COUNT(*)');
    $albums_count = $query->execute()->fetchField();

    $query = db_select('coins', 'c');
    $query->condition('c.uid', $current_user);
    $query->addExpression('SUM(c.albums)');
    $albums_bonuslimit = $query->execute()->fetchField();

    drupal_set_message('albums count: ' . $albums_count, 'warning');

    if ($albums_count >= $STARTED_USER_ALBUMS_LIMIT + $albums_bonuslimit) {
      drupal_set_message(t('Out of albums limit'), 'warning');
      drupal_goto('/node');
    }
  }

  if ($form['#id'] == 'views-exposed-form-mycoinslist-entityreference-view-widget-1') {

    $quartiers[] = array('ALL' => t('- Any -'));
    unset ($form['my_almum_title']);

    global $user;
    $current_user = $user->uid;

    $result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.type', 'album')
      ->condition('n.status', '1')
      ->condition('n.uid', $current_user)
      ->execute();

    $dropdown_array = array('' => t('- Any -'));

    foreach ($result as $node) {
      $dropdown_array[$node->title] = $node->title;
    }

    $form['my_almum_title'] = array(
      '#type' => 'select',
      '#default_value' => '1',
      '#options' => $dropdown_array,
    );
  }
}

function coins_form_alter_submit_handler_add ($form, &$form_state) {
  dsm($form_state['values']['is_product']);
}

function coins_form_alter_submit_handler_update ($form, &$form_state) {
  db_update('uc_products')
    ->fields(array(
      'is_product' => $form_state['values']['is_product'],
    ))
    ->condition('nid', $form_state['values']['nid'])
    ->execute();
}