function coins_catalog1 ($form, &$form_state) {
    // Get the list of options to populate the first dropdown.
    $options_first = _get_root_terms();//cc_ajax_example_get_first_dropdown_options();
    // If we have a value for the first dropdown from $form_state['values'] we use
    // this both as the default value for the first dropdown and also as a
    // parameter to pass to the function that retrieves the options for the
    // second dropdown.
    $selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);

    $form['dropdown_first'] = array(
        '#type' => 'select',
        '#title' => 'Instrument Type',
        '#options' => $options_first,
        '#default_value' => $selected,
        // Bind an ajax callback to the change event (which is the default for the
        // select form type) of the first dropdown. It will replace the second
        // dropdown when rebuilt.
        '#ajax' => array(
            // When 'event' occurs, Drupal will perform an ajax request in the
            // background. Usually the default value is sufficient (eg. change for
            // select elements), but valid values include any jQuery event,
            // most notably 'mousedown', 'blur', and 'submit'.
            // 'event' => 'change',
            'callback' => 'coins_catalog_callback',
            'wrapper' => 'dropdown-second-replace',
        ),
    );

    $form['dropdown_second'] = array(
        '#type' => 'select',
        '#title' => $options_first[$selected] . ' ' . t('Instruments'),
        // The entire enclosing div created here gets replaced when dropdown_first
        // is changed.
        '#prefix' => '<div id="dropdown-second-replace">',
        '#suffix' => '</div>',
        // When the form is rebuilt during ajax processing, the $selected variable
        // will now have the new value and so the options will change.
        '#options' => cc_ajax_example_get_second_dropdown_options($selected),
        '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    dsm($options_first);
    dsm(_get_root_terms());

    return $form;
}

/**
 * Selects just the second dropdown to be returned for re-rendering.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 *
 * @return array
 *   Renderable array (the second dropdown)
 */
function coins_catalog_callback($form, $form_state) {
    return $form['dropdown_second'];
}


function cc_ajax_example_get_first_dropdown_options() {
    // drupal_map_assoc() just makes an array('String' => 'String'...).
    return drupal_map_assoc(
        array(
            t('String'),
            t('Woodwind'),
            t('Brass'),
            t('Percussion'),
        )
    );
}

/**
 * Helper function to populate the second dropdown.
 *
 * This would normally be pulling data from the database.
 *
 * @param string $key
 *   This will determine which set of options is returned.
 *
 * @return array
 *   Dropdown options
 */
function cc_ajax_example_get_second_dropdown_options($key = '') {
    $options = array(
        '167' => array(
            '1' => 'Vi',
            '2' => 'Va',
        ),
        '178' => array(
            '1' => 'Vi1',
            '2' => 'Va2',
        ),
        '19326' => array(
            '1' => 'Vi3',
            '2' => 'Va3',
        ),
        '19333' => array(
            '1' => 'Vi4',
            '2' => 'Va4',
        ),
    );

    dsm($options);

    if (isset($options[$key])) {
        return $options[$key];
    }
    else {
        return array();
    }
}
/**
 * @} End of "defgroup ajax_example".
 */



      case 'Catalog':
          $block['subject'] = '';
          $block['content'] = coins_taxonomy_tree(1);
          break;


function coins_taxonomy_tree($vid) {
    $terms = db_query("
    SELECT td.tid, td.name, td.description, th.parent, f.field_cover_image_fid, (
      SELECT COUNT(*) FROM {taxonomy_index} ti
      LEFT JOIN {node} n ON ti.nid = n.nid
      WHERE ti.tid = td.tid AND n.status = 1
    ) node_count FROM {taxonomy_term_data} td
    INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = td.tid
    LEFT JOIN {field_data_field_cover_image} f ON f.entity_id = td.tid
    WHERE vid = :vid
    ORDER BY weight
  ", array(':vid' => $vid))->fetchAll();

    //dsm($terms);
    $output = '<div id="catalog"><div id="catalog-nav"></div>';
    $output = $output  . '<div class="empty-switch switch"><label>Show empty items<input type="checkbox" checked="checked"><span class="lever"></span></label></div>';
    $output = $output  . '<div id="catalog-tree">' . theme('item_list', array('items' => _coins_taxonomy_tree($terms)));
    $output = $output . '</div></div>';
    return $output;
}

/**
 * Helper for mymodule_taxonomy_tree()
 */
function _coins_taxonomy_tree($terms, $parent = 0, &$node_count = 0) {
    $items = array();
    $node_count = 0;

    foreach ($terms as $term) {
        //dsm($term);
        if ($term->parent == $parent) {
            $children = _coins_taxonomy_tree($terms, $term->tid, $childs_node_count);
            $node_count += $term->node_count + $childs_node_count;
            $is_empty_class = '';

            if (intval($term->node_count + $childs_node_count) == 0) {
                $is_empty_class = ' is-empty';
            }

            if ($term->field_cover_image_fid) {
                $file = file_load($term->field_cover_image_fid);
                $uri = $file->uri;
                $img = '<img class="activator" src="' . image_style_url("taxonomy_card", $uri) . '"/>';
            } else {
                $img = '<img class="activator" src="http://placekitten.com/g/280/280"/>'; //TODO
            }

            $class_name = generateRandomClass();
            $cardtemplate = '<div class="card-container'  . $is_empty_class .'" data-cardid="' .$class_name . '"><div class="card"><div class="card-image waves-effect waves-block waves-light"><a data-cardid="' .$class_name . '" class="card-link" href="/taxonomy/term/' .$term->tid  . '">' . $img . '<span class="card-hidden-title">' . $term->name . '</span></a></div>';
            $cardtemplate = $cardtemplate . '<div class="card-content"><span class="card-title">' . $term->name . '</span>';

            if ($term->description) {
                $cardtemplate = $cardtemplate . '<span class="card-title activator grey-text text-darken-4"><i class="icon ion-android-more-vertical"></i></span>';
            }

            $cardtemplate = $cardtemplate . '<p>' . ($term->node_count + $childs_node_count) .'</p></div>';

            if ($term->description) {
                $cardtemplate = $cardtemplate . '<div class="card-reveal"><span class="card-title grey-text text-darken-4">' . $term->name . '<i class="icon ion-android-close"></i></span>';
                $cardtemplate = $cardtemplate . $term->description . '</div>';
            }

            $cardtemplate = $cardtemplate . '</div></div>';


            $items[] = array(
                //'data' =>  '<a href="/taxonomy/term/' . $term->tid  . '" class="' . generateRandomClass() . '">'  . $term->name .'</a>',
                'data' =>  $cardtemplate,
                'children' => $children,
            );
        }
    }

    return $items;
}

//echo mymodule_taxonomy_tree(1);