<?php

  function usercoinsrates_menu() {
  //global $node;
    //dsm('2');

    $items['node/%node/estimations'] = array(
      'title' => 'Estimate',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('usercoinsrates_node_action_form', 1),
      'access callback' => array('usercoinsrates_access_callback'),
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 82,
    );

    return $items;
  }

  function usercoinsrates_access_callback($node) {
    if ($node->type == 'coin') {
      return TRUE;
    }
  }


  function usercoinsrates_theme() {
    return array(
      'usercoinsrates_node_action_form' => array(
        'render element' => 'form',
        'template' => 'usercoinsrates',
      )
    );
  }

  function usercoinsrates_node_action_form($form, &$form_state, $node) {
    global $user;
    $current_user = $user->uid;

    $query = db_select('usercoinsrates', 'r');
    $query->fields('r', array('record_id','coin_id', 'estimation', 'created', 'uid'));
    $query->condition('r.coin_id', $node->nid);
    $result = $query->execute();

    $rows = array();
    $header = array(  'Estimation', 'User',  'Date');

    $already_submitted = false;
    $user_submitted_value = 0;

    while ($value = $result->fetchAssoc()) {
      if ($value['uid'] == $current_user) {
        $already_submitted = true;
        $user_submitted_value = $value['estimation'];
      } else {
        $user_fromrecord = user_load($value['uid']);
        $username = $user_fromrecord->name;

        $rows[] = array(
          $value['estimation'],
          l($username, '/user/' . $value['uid'], array('attributes' => array('class' => array('username')))),
          $value['created'],
        );
      }
    }

    if (count($rows) > 0) {
      $table = theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array (
          'class' => array('table', 'responsive-table', 'striped'),
        ),
      ));
    } else {
      $table = '';
    }

    if (user_is_logged_in()) {
      if ($already_submitted) {
        $form['text'] = array(
          '#markup' => t('You can change or delete your prevoious estimation of coin'),
          '#prefix' => '<p>',
          '#suffix' => '</p>',
        );
      } else {
        $form['text'] = array(
          '#markup' => t('You did not estimate this coin yet. You can do it right now'),
          '#prefix' => '<p>',
          '#suffix' => '</p>',
        );
      }
    } else {
      $form['text'] = array(
        '#markup' => t('You must be <a href="/user">logged in</a> to estimate coins'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      );
    }

    $form['table'] = array(
      '#markup' => $table,
    );

    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
    );

    if ($already_submitted) {
      $form['estimation'] = array(
        '#title' => 'value',
        '#description' => 'Your previous Estimation of coin',
        '#type' => 'textfield',
        '#default_value' => $user_submitted_value,
        '#required' => true,
        '#size' => 10,
      );

      $form['submit_button_1'] = array
      (
        '#type' => 'submit',
        '#value' => 'Change estimation',
        '#submit' => array('submit_button_updaterecord'),
      );

      $form['submit_button_2'] = array
      (
        '#type' => 'submit',
        '#value' => 'Delete estimation',
        '#submit' => array('submit_button_deleterecord'),
      );

    } else {
      $form['estimation'] = array(
        '#title' => 'value',
        '#description' => 'Estimation of coin',
        '#type' => 'textfield',
        '#required' => true,
        '#size' => 10,
      );

      $form['submit_button_1'] = array
      (
        '#type' => 'submit',
        '#value' => 'Estimate',
        '#submit' => array('submit_button_addrecord'),
      );

      $form['submit_button_2'] = array
      (
        '#type' => 'hidden',
        '#value' => 'hidden',
        '#submit' => array('submit_button_addrecord'),
      );
    }

    return $form;
  }

  function submit_button_updaterecord ($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_update('usercoinsrates')
      ->fields(array(
        'estimation' => $form_state['values']['estimation'],
        'created' => date('Y-m-d H:m:s'),
      ))
      ->condition('coin_id', $form_state['values']['nid'])
      ->condition('uid', $current_user)
      ->execute();
  }

  function submit_button_deleterecord ($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_delete('usercoinsrates')
      ->condition('coin_id', $form_state['values']['nid'])
      ->condition('uid', $current_user)
      ->execute();
  }

  function submit_button_addrecord($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_insert('usercoinsrates')
      ->fields(array(
        'coin_id' => $form_state['values']['nid'],
        'uid' => $current_user,
        'estimation' => $form_state['values']['estimation'],
        'created' => date('Y-m-d H:m:s'),
      ))
      ->execute();
  }

  function usercoinsrates_node_delete($node) {
    db_delete('usercoinsrates')
      ->condition('coin_id', $node->nid)
      ->execute();
  }
