<?php
  function usercoinsrates_menu() {
    $items['node/%node/estimate'] = array(
      'title' => 'Estimate!',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('usercoinsrates_node_action_form', 1),
      'access callback' => array('usercoinsrates_access_callback', 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 80,
    );
    return $items;
  }

  function usercoinsrates_access_callback($node) {
    return $node->type == 'coin' && user_is_logged_in();
  }

  function usercoinsrates_check_if_user_already_rate() {

  }

  function usercoinsrates_node_action_form($form, &$form_state, $node) {
    global $user;
    $current_user = $user->uid;

    $query = db_select('usercoinsrates', 'r');
    $query->fields('r', array('record_id','coin_id', 'estimation', 'created', 'uid'));
    $query->condition('r.coin_id', $node->nid);
    $result = $query->execute();

    //dsm($result->fetchAll());

    $rows = array();
    $header = array(  'Estimation', 'User',  'Date');

    $already_submitted = false;
    $user_submitted_value = 0;

    while ($value = $result->fetchAssoc()) {
      if ($value['uid'] == $current_user) {
        $already_submitted = true;
        $user_submitted_value = $value['estimation'];
      } else {
        $user_fromrecord = user_load($value['uid']);
        $username = $user_fromrecord->name;

        $rows[] = array(
          $value['estimation'],
          l($username, '/user/' . $value['uid'], array('attributes' => array('class' => array('username')))),
          $value['created'],
        );
      }


    }

    if (count($rows) > 0) {
      $table = theme('table', array('header' => $header, 'rows' => $rows));
    } else {
      $table = '';
    }

    $form['text'] = array(
      '#markup' => t('This is the page that would allow you to perform an example action on node @nid.', array('@nid' => $node->nid)),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );

    $form['table'] = array(
      '#markup' => $table,
    );

    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
    );

    if ($already_submitted) {
      $form['estimation'] = array(
        '#title' => 'value',
        '#description' => 'Your previous Estimation of coin',
        '#type' => 'textfield',
        '#default_value' => $user_submitted_value,
        '#required' => true,
        '#size' => 10,
      );

      $form['submit_button_1'] = array
      (
        '#type' => 'submit',
        '#value' => 'Change estimation',
        '#submit' => array('submit_button_updaterecord'), // update field
      );

      $form['submit_button_2'] = array
      (
        '#type' => 'submit',
        '#value' => 'Delete estimation',
        '#submit' => array('submit_button_deleterecord'), // delete field
      );

    } else {
      $form['estimation'] = array(
        '#title' => 'value',
        '#description' => 'Estimation of coin',
        '#type' => 'textfield',
        // '#default_value' => isset($handbonuses->debetcredit) ? $handbonuses->debetcredit : '0.0000',
        '#required' => true,
        '#size' => 10,
      );

      $form['submit_button_1'] = array
      (
        '#type' => 'submit',
        '#value' => 'Estimate',
        '#submit' => array('submit_button_addrecord'), // add record
      );

      $form['submit_button_2'] = array
      (
        '#type' => 'hidden',
        '#value' => 'hidden',
        '#submit' => array('submit_button_addrecord'), // hidden
      );

    }

    return $form;
  }

  /**
   * Submit handler for contextual_links_example_node_action_form().
   */
  function submit_button_updaterecord ($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_update('usercoinsrates')
      ->fields(array(
        'estimation' => $form_state['values']['estimation'],
        'created' => date('Y-m-d H:m:s'),
      ))
      ->condition('coin_id', $form_state['values']['nid'])
      ->condition('uid', $current_user)
      ->execute();
  }

  function submit_button_deleterecord ($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_delete('usercoinsrates')
      ->condition('coin_id', $form_state['values']['nid'])
      ->condition('uid', $current_user)
      ->execute();
  }

  function submit_button_addrecord($form, &$form_state) {
    global $user;
    $current_user = $user->uid;

    db_insert('usercoinsrates')
      ->fields(array(
        'coin_id' => $form_state['values']['nid'],
        'uid' => $current_user,
        'estimation' => $form_state['values']['estimation'],
        'created' => date('Y-m-d H:m:s'),
      ))
      ->execute();
  }


  /*

  function addratetab2coin_menu() {
    $items = array();

    $items['node/%node/estimate'] = array(
      'title' => 'Test',
      'page callback' => 'addratetab2coin_content',
      'page arguments' => array('node', 1),
      'access callback' => 'addratetab2coin_access_callback',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );

    return $items;
  }

  function addratetab2coin_access_callback($node) {
    return $node->type == 'coin' && user_access('access content');
  }

  function addratetab2coin_content($node){
    $result='hi';
    return $result;
  }
  */

/*
function proposeitem_getnumber_action() {
    
    $all_my_actions = 0;
    
     global $user;
     $current_user = $user->uid;

$query = db_select('proposeitem', 'p');
$query->innerJoin('node', 'n', 'p.sellnode_id = n.nid'); 
$query->fields('p', array('record_id','sellnode_id', 'created', 'status', 'uid'));
$query->condition('n.uid', $current_user, "=");
$query->condition('p.status', '5', "<>");
$query->condition('p.status', '0', "<>");    


 $result = $query->execute();

  while ($value = $result->fetchAssoc()) {

     if ($value['record_id']) {$all_my_actions++;}
  }


    

$query = db_select('proposeitem', 'p');
$query->innerJoin('node', 'n', 'p.buynode_id = n.nid'); 
$query->fields('p', array('record_id','buynode_id', 'created', 'status', 'uid'));
$query->condition('n.uid', $current_user, "=");
$query->condition('p.status', '5', "<>");



 $result = $query->execute();

  while ($value = $result->fetchAssoc()) {
     if ($value['record_id']) {$all_my_actions++;}

  }
 
 return "Уведомления (" . $all_my_actions . ")";
}




function proposeitem_get_status($status) {
    switch ($status) {
        
    case 0:
        return "предложение";
        break; 
    case 1:
        return "предложение";
        break;
    case 2:
        return "покупатель подтвердил, что покупает";
        break;
    case 3:
        return "продавец подтвердил что продает послк того как покупатель подтвердил что покупает";
        break;
    case 30:
        return "продавец НЕ подтвердил что продает";
        break;
    case 4:
        return "Отправлено покупателю";
        break;
    case 5:
        return "Сделка завершена";
        break;
    case 99:
        return "Сделка закрыта";
        break;   
}

}

function proposeitem_menu() {
    
    
     

  $items['proposition/%/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'proposeitem_delete',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );
  
    $items['proposition/%/%/%/buy'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_buy',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );
  
    $items['proposition/%/%/%/buy/yes'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_buy_yes',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );
  
   $items['proposition/%/%/%/buy/no'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_buy_no',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );  
  
   $items['proposition/%/%/%/sell/yes'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_sell_yes',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );
  
   $items['proposition/%/%/%/sell/no'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_sell_no',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );  
  
   $items['proposition/%/%/%/recive/yes'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_recive_yes',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );  
  
   $items['proposition/%/%/%/recive/no'] = array(
    'title' => 'Buy',
    'page callback' => 'proposeitem_recive_no',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'), // whatever see above
    'type' => MENU_CALLBACK    
  );  
  
    $items['proposition/%/create'] = array(
    'title' => 'Create',
    'page callback' => 'proposeitem_create',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK    
  );
  
  $items['my-notifications'] = array( 
    'title callback' => 'proposeitem_getnumber_action',
    'page callback' => 'proposeitem_getuserlist',

    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -100,
    'menu_name' => 'user-menu',
  );
  
  
   $items['proposeitems-all'] = array( 
    'title' => 'List',
    'page callback' => 'proposeitem_getadminlist',

    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK    
  );
  
   $items['proposeitems'] = array( 
    'title' => 'List',
    'page callback' => 'proposeitem_getadmin_shortlist',

    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK    
  );
  
    $items['proposition/%/buyit'] = array(
    'title' => 'Buy it',
    'page callback' => 'proposeitem_buyit',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK    
  );
  
 
  
  
  
  
   $items['admin/proposeitems/in-process/%/send'] = array(
    'title' => 'List',
    'page callback' => 'proposeitem_process_send',  
    'page arguments' => array(3),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK
  );
  
  $items['admin/proposeitems/in-process/%/cancel'] = array(
    'title' => 'List',
    'page callback' => 'proposeitem_process_cancel',
    'page arguments' => array(3),
    'access arguments' => array('administer users'), // whatever see above
    'type' => MENU_CALLBACK    
  );
  

  
  
  
  
  
    $items['admin/proposeitems/in-process/%/%/%/close/sell'] = array(
    'title' => 'List',
    'page callback' => 'proposeitem_process_close_sell',  
    'page arguments' => array(3,4,5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK      
  );
  
   $items['money'] = array(
    'title' => 'List',
    'page callback' => 'proposeitem_money_process',  

    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK      
  );
  
  $items['admin/money/%/status'] = array(
    'title' => 'List',
    'page callback' => 'proposeitem_money_status',    
    'page arguments' => array(2),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK      
  );
  
  $items['my-money'] = array(
    'title' => 'My money',
    'page callback' => 'proposeitem_money_user',  
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK    
  ); 

  
  return $items;
}




function proposeitem_buyit($arg0) { 
   global $user;
   $current_user = $user->uid;

   db_insert('proposeitem')
   ->fields(array(
   'buynode_id' => 0, 
   'sellnode_id' => $arg0, 
   'uid' => $current_user,  
   'status' => 1,
   'created' => date('Y-m-d H:m:s'),
   ))
   ->execute();
   
   $node = node_load($arg0);
   $node_autor = $node->uid;
   $load_author = user_load($node_autor);
   $author_email = $load_author->mail;
   $send_message="Кто-то хочет купить ваш лот. Пожалуйста, подтвердите или отмените <a href='http://ilikeit.kiev.ua/node/" .$arg0 ."'>продажу</a>";

   drupal_mail('system', 'mail',  $author_email, language_default(), array(
  'context' => array(
    'subject' => 'Подтвердите продажу лота',
    'message' => $send_message,
  )
  ));

   drupal_set_message(t('Вы подали заявку на покупку лота'));   
   drupal_set_message(t('Письмо продавцу отправлено'));   
   drupal_goto('node/' . $arg0 );

}




function proposeitem_buy($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;
  
  db_update('proposeitem')
  ->fields(array('status' => 1))
  ->condition('record_id', $arg0)
  ->execute();
   drupal_set_message(t('Вы подтвердили покупку'));   
   drupal_goto('node/' . $arg2 );
  
}

function proposeitem_buy_yes($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;
  
  db_update('proposeitem')
  ->fields(array('status' => 2))
  ->condition('record_id', $arg0)
  ->execute();
   drupal_set_message(t('Вы повторно подтвердили покупку'));   
  if ($arg2 != 0)
    { drupal_goto('node/' . $arg2 );}
    else { drupal_goto('node/' . $arg1 );}
  
}


function proposeitem_buy_no($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;
  
  db_delete('proposeitem')
  ->condition('record_id', $arg0)  
  ->execute();
   drupal_set_message(t('Вы не подтвердили покупку'));   
   if ($arg2 != 0)
    { drupal_goto('node/' . $arg2 );}
    else { drupal_goto('node/' . $arg1 );}
  
}


function proposeitem_sell_yes($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;

    
    $nowtime = time() + (1 * 3 * 60  * 60);
    $newtime = $nowtime + (2 * 24 * 60 * 60) ;
    
   $tnode = db_select('field_data_field_ctimer', 'ct')
  ->fields('ct', array('entity_id'))
  ->condition('entity_id', $arg1)
  ->execute()
  ->fetchField();
  if ( $tnode) { 

         db_update('field_data_field_ctimer')
        ->fields(array(
    'entity_type' => 'node',
      'bundle' => 'sale_item',
      'entity_id' => $arg1,
      'revision_id' => $arg1,
      'language' => 'und',
      'delta' => 0,
      'field_ctimer_countdown_timer' => $newtime, ))
      ->condition('entity_id', $arg1)
        ->execute();
        drupal_set_message(t('Таймер запущен')); 
        
         db_update('proposeitem')
  ->fields(array('status' => 3))
  ->condition('record_id', $arg0)
  ->execute();
   drupal_set_message(t('Вы повторно подтвердили продажу'));
   
   if ($arg2 != 0)
    { drupal_goto('node/' . $arg2 );}
    else { drupal_goto('node/' . $arg1 );}
    
        }
  
  else {
      $nid = db_insert('field_data_field_ctimer') 
    ->fields(array(
      'entity_type' => 'node',
      'bundle' => 'sale_item',
      'entity_id' => $arg1,
      'revision_id' => $arg1,
      'language' => 'und',
      'delta' => 0,
      'field_ctimer_countdown_timer' => $newtime,
    ))
    ->execute();
    drupal_set_message(t('Таймер запущен')); 
  
  db_update('proposeitem')
  ->fields(array('status' => 3))
  ->condition('record_id', $arg0)
  ->execute();
   drupal_set_message(t('Вы повторно подтвердили продажу'));
   
   if ($arg2 != 0)
    { drupal_goto('node/' . $arg2 );}
    else { drupal_goto('node/' . $arg1 );}
     
  }
 
  

  
    
  
}

function proposeitem_sell_no($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;

  
  	db_delete('proposeitem')
  ->condition('record_id', $arg0) 
  ->execute();
  
  
   drupal_set_message(t('Вы не подтвердили продажу'));   
    if ($arg2 != 0)  
    { drupal_goto('node/' . $arg2 );}
    else { drupal_goto('node/' . $arg1 );}
  
}

function proposeitem_recive_yes($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;
  
  db_update('proposeitem')
  ->fields(array('status' => 5))
  ->condition('record_id', $arg0)  
  ->execute();
   drupal_set_message(t('Сделка завершена'));   
   drupal_goto('node/' . $arg2 );
  
}

function proposeitem_recive_no($arg0, $arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;
  
  db_update('proposeitem')
  ->fields(array('status' => 0))
  ->condition('record_id', $arg0)  
  ->execute();
   drupal_set_message(t('Сделка отменена'));   
   drupal_goto('node/' . $arg2 );
  
}

 



function proposeitem_process_send($arg0) 
{  
global $user;
$current_user = $user->uid;
  db_update('proposeitem')
  ->fields(array('status' => 4))
  ->condition('record_id', $arg0)  
  ->execute();
   drupal_set_message(t('Отправлено покупателю'));   
   drupal_goto('/proposeitems');  
  
}

function proposeitem_process_cancel($arg0) 
{  
global $user;
$current_user = $user->uid;

 $query = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'buynode_id', 'status',))
    ->condition('p.record_id', $arg0)
    ->condition('p.buynode_id', 0)
	->condition('p.status', 3) 
    ->execute()
    ->fetchAll();
if (count($query) >0 )
{  	
    db_delete('proposeitem')
  ->condition('record_id', $arg0)  
  ->execute();
}
else

{ db_update('proposeitem')
  ->fields(array('status' => 0))
  ->condition('record_id', $arg0)  
  ->execute();
}
   drupal_set_message($arg0);    
   drupal_goto('/proposeitems');  
}








function  proposeitem_process_close_sell($arg0, $arg1, $arg2) 
{
	  
  $price = db_select('field_data_field_price', 'p')
  ->fields('p', array('field_price_value'))
  ->condition('entity_id', $arg1)
  ->execute()
  ->fetchField();
  
  $price=$price - ($price/10);
  
    $query = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'sellnode_id', 'status', 'uid'))
    ->condition('p.status', 4)
    ->condition('record_id', $arg0)
    ->condition('p.buynode_id', 0) 
     ->execute()
   ->fetchAll(); 
   
   $money2user = 0;
   
   $node = node_load($arg1);
   $node_author= $node->uid;
   
   if (count($query) > 0)
        { $money2user= $node_author;} 
   else { $money2user= $arg2;}
   

	
 
  
  
 db_update('proposeitem')
  ->fields(array('status' => 5))
  ->condition('record_id', $arg0)  
  ->execute(); 
  
  $id = db_insert('proposeitem_money')
  			->fields(array(
    		'user' => $money2user,
			'sellnode_id'=>$arg1, 
			'summa'=>$price,
    		'status' => 1,

  			))
  			->execute(); 
	
	
$flag = flag_get_flag('flag_stage_4');
if ($flag) {
  $flag->flag('flag', $arg1); 
}
 

			
            
   drupal_set_message(t('Сделка завершена'));  

   drupal_goto('/proposeitems'); 
  
}



function proposeitem_money_status($arg0) 
{  
  db_update('proposeitem_money')
  ->fields(array('status' => 2))
  ->condition('record_id', $arg0)
  ->execute();
   drupal_set_message(t('Вы подтвердили что выплатили продавцу деньги'));   
   drupal_goto('money');
  
}






function proposeitem_delete($arg1, $arg2) 
{
	  
global $user;
$current_user = $user->uid;

$query = db_select('proposeitem', 'p');
$query->fields('p', array('uid'));
$query->condition('p.sellnode_id', $arg1);
$result = $query->execute();

  foreach ($result as $uid) {
    $nodeowner= $uid->uid;}

if ($nodeowner == $current_user){
	db_delete('proposeitem')
  ->condition('sellnode_id', $arg1)
  ->execute();
  
   drupal_goto('node/' . $arg2 );
 }

else {drupal_goto('node/403');}
}








function proposeitem_create($arg1) 
{
$node = new stdClass();
$node->type = "sale_item";
$node->title = "Новый лот";
$node->language = LANGUAGE_NONE;

node_object_prepare($node);



$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid', 'tid'));
$query->condition('ti.nid', $arg1);
$result = $query->execute();
  foreach ($result as $tid) {
    $current_tid= (int)$tid->tid;
}
 
 
$node->field_cat[$node->language][]['tid'] = $current_tid; 
 
$node = node_submit($node);
node_save($node);

$myurl = "node/". $node->nid . "/edit";   
$mydest = "/node/" . $arg1; 
drupal_goto($myurl, array('query' => array('destination' => $mydest)));
}




function proposeitem_getnodes() {
	$output="";
   
if ($node = menu_get_object()) {

$current_node = $node->nid;

$query = db_select('taxonomy_index', 'ti');
$query->fields('ti', array('nid', 'tid'));
$query->condition('ti.nid', $current_node);
$result = $query->execute();
$tids = array();
  foreach ($result as $tid) {
    $current_tid= (int)$tid->tid;

  
global $user;
$current_user = $user->uid;

$query = db_select('node', 'n');
$query->fields('n', array('nid', 'title', 'type', 'uid', 'status'));
$query->leftJoin('taxonomy_index', 'ti', 'n.nid = ti.nid');
$query->leftJoin('proposeitem', 'pi', 'n.nid = sellnode_id');
$query->condition('n.type', 'sale_item');
$query->condition('n.status', NODE_PUBLISHED);
$query->condition('n.uid', $current_user);
$query->condition('ti.tid', $current_tid);
$query->condition('sellnode_id',NULL);

$result = $query->execute(); 

 $nodes = array();
  foreach ($result as $node) {
    $nodes[$node->nid] = check_plain($node->title);

  }

 return $nodes;
 
}	
}



function proposeitem_getlist() {
	global $user;
$current_user = $user->uid;

if ($node = menu_get_object()) {
 	$buyn = $node->nid;
    $node_author= $node->uid;
	
   }

   
$output="";
$query = db_select('proposeitem', 'p');
$query->innerJoin('node', 'n', 'p.sellnode_id = n.nid');
$query->fields('p', array('record_id','sellnode_id', 'buynode_id', 'created', 'status', 'uid'));
$query->fields('n', array('title'));  
$query->condition('p.buynode_id', $buyn);      

 $result = $query->execute();
	  
	  $rows = array();
	  $header = array(  'Лот', 'Создано',  'Действия');
  while ($value = $result->fetchAssoc()) {

	  if ($value['uid'] == $current_user)
	  {$rowaction="<a class='btn btn-danger' href='/proposition/".$value['sellnode_id']."/".$buyn."/delete'>Удалить свою заявку</a>";}
      if ($value['status'] == '1' && $value['uid'] == $current_user)
	  {$rowaction="Покупатель хочет купить.</br> <a class='btn btn-danger' href='/proposition/".$value['sellnode_id']."/".$buyn."/delete'>Удалить свою заявку</a>";}
      
      if ($value['status'] == '2' && $value['uid'] == $current_user)
	  {$rowaction="Покупатель подтвердил, что хочет купить. </br>" . "<a class='btn btn-success' href='/proposition/".$value['record_id']."/".$value['sellnode_id']."/".$buyn."/sell/yes'>Подтвердить продажу</a> " . " <a class='btn btn-warning' href='/proposition/".$value['record_id']."/".$value['sellnode_id']."/".$buyn."/sell/no'>Не продаю</a>";}
      
       if ($value['status'] == '3' && $value['uid'] == $current_user)    
	  {$rowaction="В обработке: Подтверждено вами и покупателем";}
      
      if ($value['status'] == '30' && $value['uid'] == $current_user)   
	  {$rowaction="Снято с обработки, так как не подтверждено вами";}
      
      if ($value['status'] == '4' && $value['uid'] == $current_user)   
	  {$rowaction="Отправлено покупателю";}
      
      if ($value['status'] == '5' && $value['uid'] == $current_user)   
	  {$rowaction="Сделка завершена";}
      
	  

	      
	  

	  if ($current_user == $node_author)
	  {$rowaction="<a class='btn btn-info' href='/proposition/".$value['record_id']."/".$value['sellnode_id']."/".$buyn."/buy'>Купить</a>";} 
	   
	  if ($value['status'] == '1' && $current_user == $node_author )   
	   {$rowaction="Подана заявка на покупку </br>" . "<a class='btn btn-success' href='/proposition/".$value['record_id']."/".$value['sellnode_id']."/".$buyn."/buy/yes'>Подтвердить</a> " . " <a class='btn btn-warning' href='/proposition/".$value['record_id']."/".$value['sellnode_id']."/".$buyn."/buy/no'>Отменить</a>";    
	  
	   }    
       
       if ($value['status'] == '2' && $current_user == $node_author )   
	   {$rowaction="В обработке: Подтверждено вами. Еще не подтверждено продавцом";} 
       
       if ($value['status'] == '3' && $current_user == $node_author )   
	   {$rowaction="В обработке: Подтверждено вами и продавцом";} 
       
       if ($value['status'] == '30' && $current_user == $node_author )   
	   {$rowaction="Снято с обработки: не подтверждено продавцом";} 
       
       if ($value['status'] == '4' && $current_user == $node_author )   
	   {

         $rowaction="Отправлено вам"; 
       } 
       
       if ($value['status'] == '5' && $current_user == $node_author )   
	   {$rowaction="Сделка завершена";} 
       

	  
	  
	  
	  $rows[] = array(

		$value['title'],
		$value['created'],

		$rowaction
			  
	  );
	}
       $query = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'sellnode_id', 'status', 'uid'))
    ->condition('p.status', 5)
    ->condition('p.buynode_id', $buyn) 
     ->execute()
   ->fetchAll(); 

   if (count($query) >0)
   {
    $output= "Сделка завершена";}
    else 
	{$output=   theme('table', array('header' => $header, 'rows' => $rows));}
 return $output;
}




function plink($nnid)
{
    $options = array('absolute' => TRUE);
    $nid = $nnid; // Node ID
    $ou=  l($nid, 'node/'.$nid, array('options' => array('absolute' => TRUE)));
	return $ou;
}

function uplink($nnid)
{
    $user=user_load($nnid);
    $username=$user->name;
     
    $options = array('absolute' => TRUE);
    $nid = $nnid; // Node ID
    $ou=  l($username, 'user/'.$nid, array('options' => array('absolute' => TRUE)));
	return $ou;
}


function proposeitem_getadminlist() {

   
$output="";
$query = db_select('proposeitem', 'p');

$query->fields('p', array('record_id','buynode_id', 'sellnode_id', 'created', 'status', 'uid'));


 $result = $query->execute();
	  
	  $rows = array();
	  $header = array('ID', 'Лот на продажу', 'Запрос "Куплю"',   'Создано', 'Статус', 'Действия' );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     

      
      if ($value['status'] == 3)
      {
	    $rowaction= "<a class='btn btn-success' href='/admin/proposeitems/in-process/" . $value['record_id'] . "/send'>Перевести</a> в статус 'Отправлено покупателю' </br>";
      $rowaction = $rowaction . "<a class='btn btn-warning' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/cancel'>Перевести</a> в статус 'Отказ' </br>";

   
  
    
      
      
      }
      
       if ($value['status'] == 4)  
      {
    // $rowaction =  "<a class='btn btn-danger' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/" . $value['sellnode_id'] . "/" . $value['uid'] . "/close/sell'>Перевести</a> в статус 'Закрыть'" ;
      }
     
	  
	   
	  $rows[] = array(
	  
	  $value['record_id'],
		 plink($value['sellnode_id']),
		 plink($value['buynode_id']), 

		$value['created'],

		$value['status'],
        $rowaction
		
		
			  
	  );
	}
	$output=   theme('table', array('header' => $header, 'rows' => $rows));
 return $output;
}




function proposeitem_getadmin_shortlist() {

   
$output="";
$query = db_select('proposeitem', 'p');

$query->fields('p', array('record_id','buynode_id', 'sellnode_id', 'created', 'status', 'uid'));
$query->condition('p.status', array(3,4), "IN");   


 $result = $query->execute();
	  
	  $rows = array();
	  $header = array('ID', 'Лот на продажу', 'Продавец', 'Запрос "Куплю"',   'Создано', 'Статус', 'Действия', 'Осталось часов' );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     $lefttime="";
	  
      
      if ($value['status'] == 3)
      {
	    $rowaction= "<a class='btn btn-success' href='/admin/proposeitems/in-process/" . $value['record_id'] . "/send'>Перевести</a> в статус 'Отправлено покупателю' </br>";
      $rowaction = $rowaction . "<a class='btn btn-warning' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/cancel'>Перевести</a> в статус 'Отказ' </br>";

       $nowtime = time() + (1 * 3 * 60  * 60);
    
    $querytime = db_select('field_data_field_ctimer', 'ct')
    ->fields('ct', array('field_ctimer_countdown_timer'))
    ->condition('entity_id',  $value['sellnode_id'], '=')
    ->execute()
    ->fetchField();
    
      $lefttime = floor(($querytime - $nowtime)/60/60);
      }
      
       if ($value['status'] == 4)  
      {
     $rowaction =  "<a class='btn btn-danger' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/" . $value['sellnode_id'] . "/" . $value['uid'] . "/close/sell'>Перевести</a> в статус 'Закрыть'" ;
      }
     
     $node = node_load($value['sellnode_id']);
     $node_author= $node->uid;
	   
	  $rows[] = array(
	  
	  $value['record_id'],
		 plink($value['sellnode_id']),
         uplink($node_author),
		 plink($value['buynode_id']), 

		$value['created'],

		$value['status'],
        $rowaction,
        $lefttime
		
		
			  
	  );
	}
	$output=   theme('table', array('header' => $header, 'rows' => $rows));
 return $output;
}



function proposeitem_getuserlist() {
    $all_my_actions = 0;
    
     global $user;
     $current_user = $user->uid;


   
$output="<h2>Хотят купить у меня</h2>";
$query = db_select('proposeitem', 'p');
$query->innerJoin('node', 'n', 'p.sellnode_id = n.nid'); 
$query->fields('p', array('record_id','sellnode_id', 'created', 'status', 'uid'));
$query->condition('n.uid', $current_user, "=");
$query->condition('p.status', '5', "<>");
$query->condition('p.status', '0', "<>");    


 $result = $query->execute();
 
	  
	  $rows = array();
	  $header = array( 'Мой лот на продажу',  'Создано', 'Статус',  );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     if ($value['status']) {$all_my_actions++;}
     

      
      if ($value['status'] == 3)
      {
	    $rowaction= "<a class='btn btn-success' href='/admin/proposeitems/in-process/" . $value['record_id'] . "/send'>Перевести</a> в статус 'Отправлено покупателю' </br>";
      $rowaction = $rowaction . "<a class='btn btn-warning' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/cancel'>Перевести</a> в статус 'Отказ' </br>";

      }
      
       if ($value['status'] == 4)  
      {
     $rowaction =  "<a class='btn btn-danger' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/" . $value['sellnode_id'] . "/" . $value['uid'] . "/close/sell'>Перевести</a> в статус 'Закрыть'" ;
      }
     
	  
	   
	  $rows[] = array(
	  

		 plink($value['sellnode_id']),

		$value['created'],

		proposeitem_get_status($value['status']),

		
		
			  
	  );
	}
	$output=  $output .  theme('table', array('header' => $header, 'rows' => $rows));
    

    
    $output= $output . "<h2>Хотят предложить на мои запросы</h2>";
$query = db_select('proposeitem', 'p');
$query->innerJoin('node', 'n', 'p.buynode_id = n.nid'); 
$query->fields('p', array('record_id','buynode_id', 'created', 'status', 'uid'));
$query->condition('n.uid', $current_user, "=");
$query->condition('p.status', '5', "<>");


 $result = $query->execute();
 
 
	  
	  $rows = array();
	  $header = array( 'Запросы "Куплю"',   'Создано', 'Статус',  );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     if ($value['status']) {$all_my_actions++;}

      
      if ($value['status'] == 3)
      {
	    $rowaction= "<a class='btn btn-success' href='/admin/proposeitems/in-process/" . $value['record_id'] . "/send'>Перевести</a> в статус 'Отправлено покупателю' </br>";
      $rowaction = $rowaction . "<a class='btn btn-warning' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/cancel'>Перевести</a> в статус 'Отказ' </br>";

      }
      
       if ($value['status'] == 4)  
      {
     $rowaction =  "<a class='btn btn-danger' href='/admin/proposeitems/in-process/" .$value['record_id'] ."/" . $value['sellnode_id'] . "/" . $value['uid'] . "/close/sell'>Перевести</a> в статус 'Закрыть'" ;
      }
     
	  
	   
	  $rows[] = array(
	  

		 plink($value['buynode_id']), 

		$value['created'],

		proposeitem_get_status($value['status']),

		
			  
	  );
	}
	$output=  $output .  theme('table', array('header' => $header, 'rows' => $rows));
    
    
 return $output;
}









function proposeitem_money_process() 
{
$output="";

$query = db_select('proposeitem_money', 'm');
$query->innerJoin('users', 'u', 'm.user = u.uid'); 
$query->fields('m', array('record_id', 'sellnode_id', 'summa', 'status',));
$query->fields('u', array('name', 'uid',));
$result = $query->execute();

	  $rows = array();
	  $header = array('ID', 'Продавец', 'Лот',  'Сумма', 'Действия' );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     
	  if ($value['status'] == 1)  
      {
      $rowaction =  "<a class='btn btn-danger' href='/admin/money/" .$value['record_id'] ."/status'>Деньги выплачены</a>"; 
      }
      
      if ($value['status'] == 2)
      {
	    $rowaction= "Деньги выплачены";
 
          
      }
      

	  $rows[] = array(
	  
	  $value['record_id'],
      "<a href='/user/" . $value['uid']. "'>" . $value['name'] . "</a>",
		plink($value['sellnode_id']),
		$value['summa'],

        $rowaction
	
			  
	  );
	}
	$output=   theme('table', array('header' => $header, 'rows' => $rows));
 return $output; 
 

}



function proposeitem_form($form, &$form_state) {
	
  $options = proposeitem_getnodes();
  $endopt= end($options); 
  
  global $user;
  $current_user = $user->uid;

  
  if ($node = menu_get_object()) {
 	$buyn = $node->nid;
	 $node_author= $node->uid;
   }
   

   
   $query = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'sellnode_id', 'status', 'uid'))
    ->condition('p.status', 5)
    ->condition('p.buynode_id', $buyn) 
     ->execute()
   ->fetchAll(); 

   if (count($query) >0)
   {
       $form['markup'] = array(
			'#prefix' => '<div id = "formajaxnodecontent">',
			'#suffix' => '</div>',
			'#markup' =>  "",
		  );
		

        return $form; 
	  } 
     
    

   
  
  $olen = count($options);
  
  
  if ($current_user ==$node_author)
  
  {  $form['markup'] = array(
			'#prefix' => '<div id = "formajaxnodecontent">',
			'#suffix' => '</div>',
			'#markup' =>  "Это ваш запрос. Посмотрите список предложений ниже:",
		  );
		 
		 $form['currentnode']= array(
			'#type' => 'hidden',
			'#value' => $buyn,
		);

 return $form; 
	  }
	  
	  
  
  if ($olen<1)
  {

			
		 
		  $form['markup'] = array(
			'#prefix' => '<div id = "formajaxnodecontent">',
			'#suffix' => '</div>',
			'#markup' =>  "Вам нечего предложить, поэтому <a class='btn btn-primary' href='/proposition/" . $buyn ."/create'>создайте новый продукт</a>",
		  );
		 
		 $form['currentnode']= array(
			'#type' => 'hidden',
			'#value' => $buyn,
		);

 return $form; 


	  }
 
  else 
  {
	  
	  
  $form['markup'] = array(
    '#prefix' => '<div id = "formajaxnodecontent">',
    '#suffix' => '</div>',
    '#markup' =>  "<a class='btn btn-primary' href='/proposition/" . $buyn ."/create'>Создайте новый продукт</a> или выберете из списка", 
  );
  
  
  $form['node'] = array(
    '#type' => 'select',
    '#title' => t('Выбрать из списка'),
    '#options' => $options,

    '#prefix' => '<div id = "form-ajax-nodes">',
    '#suffix' => '</div>',
  );
  
 

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Предложить'),

  );
  	
 
  
 
 $form['currentnode']= array(
    '#type' => 'hidden',
    '#value' => $buyn,
);
 
 
  return $form; 
  }
}



function proposeitem_form_submit($form, &$form_state) {
	if (isset($form_state['values']['node'])) {

   $nid = $form_state['values']['node'];
  $buyn = $form_state['values']['currentnode'];
	 proposeitem_write($nid,$buyn);
	}

}
  


function proposeitem_write($nid,$buyn) {
   global $user;
   $current_user = $user->uid;

	
 db_insert('proposeitem')
   ->fields(array(
   'buynode_id' => $buyn, 
   'sellnode_id' => $nid, 
   'uid' => $current_user,
   'created' => date('Y-m-d H:m:s'),
   ))
   ->execute();


}





function proposeitem_buyitblock() {
    $output = "";
   global $user;
   $current_user = $user->uid;
   if ($node = menu_get_object()) {
 	$buyn = $node->nid;
	$node_author= $node->uid;
   }  
   
   $query = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'sellnode_id', 'status', 'uid'))
    ->condition('p.sellnode_id', $buyn)
    ->condition('p.buynode_id', 0) 
     ->execute()
   ->fetchAll(); 
     
    

     
    
     
    $res = count($query); 
    if ($res == 0) 
        if ($node_author != $current_user)
        {$output = $output . "<a class='btn btn-primary' href='/proposition/" . $buyn ."/buyit'>Купить</a>"; }
        else {}
    else
    {  
      $who_buyit = $query[0]->uid;
      $status = $query[0]->status;  
        
        
       if ($who_buyit == $current_user && $status  == 1) {
        $output = $output . "Подана заявка на покупку </br>" . "<a class='btn btn-success' href='/proposition/".$query[0]->record_id."/".$query[0]->sellnode_id."/0/buy/yes'>Подтвердить покупку</a> " . " <a class='btn btn-warning' href='/proposition/".$query[0]->record_id."/".$query[0]->sellnode_id."/0/buy/no'>Отменить</a>";
       }
       
       if ($node_author == $current_user && $status  == 1) {
        $output = $output . "Ожидаем подтверждения покупки";
       }

       
       if ($who_buyit == $current_user && $status  == 2) {
        $output = $output . "Ожидаем подтверждения продажи";
       }
       
       if ($node_author == $current_user && $status  == 2) {
        $output = $output . "Подана заявка на покупку </br>" . "<a class='btn btn-success' href='/proposition/".$query[0]->record_id."/".$query[0]->sellnode_id."/0/sell/yes'>Подтвердить продажу</a> " . " <a class='btn btn-warning' href='/proposition/".$query[0]->record_id."/".$query[0]->sellnode_id."/0/sell/no'>Отменить продажу</a>";
       }
       

       
       if ($who_buyit == $current_user && $status  == 3) {
        $output = $output .   "В обработке: Подтверждено вами и продавцом";
       }
       
      if ($node_author == $current_user && $status  == 3) {
        $output = $output .   "В обработке: Подтверждено вами и покупателем";
       }
       

       
       if ($who_buyit == $current_user && $status  == 4) {
        $output = $output .   "Отправлено вам";
       }
       
      if ($node_author == $current_user && $status  == 4) {
        $output = $output .   "Отправлено покупателю";
       }
       

       
       if ( $status  == 5) {
        $output = $output .   "Сделка завершена";
       }
       
      
       
       
    }
    return $output;
}

 











function proposeitem_block_info() {
  $blocks['propositions'] = array(
    'info' => t('Выбрать из своих лотов'),

  );
  
   $blocks['propositions_list'] = array(
    'info' => t('Список предложений'),

  ); 
  
     $blocks['propositions_buyit'] = array(
    'info' => t('Купить лот'),

  ); 
  
 
  return $blocks;
}


function proposeitem_block_view($delta = '') {
  $block = array();
 
  switch ($delta) {
    case 'propositions':
      $block['subject'] = t('Выбрать из своих лотов');
      $block['content'] = drupal_get_form('proposeitem_form');
      break;
	  
	   case 'propositions_list':
      $block['subject'] = t('Список предложений');
      $block['content'] = proposeitem_getlist(); 
      break;
      
      case 'propositions_buyit':
      $block['subject'] = t('Купить лот');
      $block['content'] = proposeitem_buyitblock(); 
      break;
	  
	  
  }
  return $block;
}



function proposeitem_money_user() 
{
$output="";

global $user;
$current_user = $user->uid;

$query = db_select('proposeitem_money', 'm');
$query->fields('m', array('record_id', 'sellnode_id', 'summa', 'status',));
$query->condition('user', $current_user);
$result = $query->execute();

	  $rows = array();
	  $header = array(  'Лот',  'Сумма',  'Статус' );
  while ($value = $result->fetchAssoc()) {
	 $rowaction=""; 
     
	  if ($value['status'] == 1)  
      {
        $rowaction= "Ожидает выплат";
      }
      
      if ($value['status'] == 2)
      {
	    $rowaction= "Деньги выплачены";
 
          
      }
      

	  $rows[] = array(
	  
	
     
		plink($value['sellnode_id']),
		$value['summa'],
		$rowaction,

	
			  
	  );
	}
	$output=   theme('table', array('header' => $header, 'rows' => $rows));
 return $output; 
 

}


function proposeitem_cron() {
  watchdog('ДЕЙСТВИЕ КУПИТЬ','Запущено');
  
   $nowtime = time() + (1 * 3 * 60  * 60);
   
   $query = db_select('field_data_field_ctimer', 'ct');
   $query->fields('ct', array('entity_id', 'field_ctimer_countdown_timer'));
   $query->condition('field_ctimer_countdown_timer',  $nowtime, '<');
   $result = $query->execute();
    
	 
  while ($value = $result->fetchAssoc()) { 
    $arg0 = $value['entity_id']; 
    watchdog('ДЕЙСТВИЕ КУПИТЬ',"Лот №:" . $arg0 . " не был промодерирован. Возврат в статус 'Активно'");
       
    $query2 = db_select('proposeitem', 'p')
    ->fields('p', array('record_id', 'buynode_id', 'status', 'uid'))
    ->condition('p.sellnode_id', $arg0)
	->condition('p.status', 3) 
    ->execute()
    ->fetchAll();
    

    
    $node = node_load($arg0);
    $node_autor = $node->uid;
    $load_author = user_load($node_autor);
    $author_email = $load_author->mail;
    $send_message="Лот возвращен на склад. Администратор не подтвердил продажу.";
    
    
  watchdog('ДЕЙСТВИЕ КУПИТЬ, продавец', $author_email);
   drupal_mail('system', 'mail',  $author_email, language_default(), array(
  'context' => array(
    'subject' => 'Администратор не подтвердил продаж',
    'message' => $send_message,
  )
  ));
  
  
    $load_buyer = user_load($row->uid);
    $buyer_email = $load_buyer->mail;
    $send_message="Покупка не удалась. Администратор не подтвердил продажу.";
    watchdog('ДЕЙСТВИЕ КУПИТЬ, покупатель', $buyer_email);
  
   drupal_mail('system', 'mail',  $buyer_email, language_default(), array(
  'context' => array(
    'subject' => 'Покупка не удалась',
    'message' => $send_message,
  )
  ));
  
    
    if (count($query2) >0 )
    {  	
        db_delete('proposeitem')
      ->condition('sellnode_id', $arg0)  
      ->execute();
      
      db_delete('field_data_field_ctimer')
      ->condition('entity_id', $arg0)  
      ->execute();
      
    }
    else

    { db_update('proposeitem')
      ->fields(array('status' => 0))
      ->condition('sellnode_id', $arg0)  
      ->execute();
    }
  }
  
}


*/
